
#ifndef __FIXEDFONTREPETTTF7
#define __FIXEDFONTREPETTTF7
const uint8_t HotStuff7Bitmaps[] PROGMEM = {
  0x00, 0x34, 0x6B, 0x0E, 0x10, 0x1E, 0xF0, 0xE1, 0xC3, 0x84, 0xF5, 0xEB,
  0x0E, 0x10, 0x1E, 0xB0, 0xE1, 0xC3, 0xE8, 0x34, 0x6B, 0x0E, 0x00, 0x18,
  0x30, 0x61, 0xC2, 0x68, 0xF5, 0xEB, 0x0E, 0x10, 0x18, 0x70, 0xE1, 0xC3,
  0xE8, 0xF7, 0xEF, 0x06, 0x00, 0x1E, 0xF0, 0x60, 0xC1, 0xEC, 0xF7, 0xEF,
  0x06, 0x00, 0x1E, 0xF0, 0x60, 0xC1, 0x80, 0x36, 0x6F, 0x06, 0x00, 0x18,
  0xF0, 0xE1, 0xC2, 0x6C, 0xC3, 0x87, 0x0E, 0x10, 0x1E, 0xF0, 0xE1, 0xC3,
  0x84, 0xDD, 0x44, 0x04, 0x44, 0x4D, 0x02, 0x04, 0x08, 0x10, 0x00, 0x40,
  0xE1, 0xC2, 0x68, 0xC3, 0x87, 0x16, 0x80, 0x1C, 0x34, 0x62, 0xC5, 0x84,
  0xC1, 0x83, 0x06, 0x00, 0x18, 0x30, 0x60, 0xC1, 0xEC, 0xC3, 0x87, 0x9E,
  0x90, 0x1A, 0x70, 0xE1, 0xC3, 0x84, 0xC3, 0x87, 0x8E, 0x90, 0x18, 0xF0,
  0xE1, 0xC3, 0x84, 0x34, 0x6B, 0x0E, 0x10, 0x18, 0x70, 0xE1, 0xC2, 0x68,
  0xF5, 0xEB, 0x0E, 0x10, 0x1E, 0xB0, 0x60, 0xC1, 0x80, 0x34, 0x6B, 0x0E,
  0x10, 0x18, 0x74, 0xE2, 0xC4, 0x64, 0xF5, 0xEB, 0x0E, 0x10, 0x1E, 0xB0,
  0xE1, 0xC3, 0x84, 0x34, 0x6B, 0x0E, 0x00, 0x06, 0x80, 0xE1, 0xC2, 0x68,
  0xF7, 0xEC, 0x40, 0x80, 0x02, 0x04, 0x08, 0x10, 0x20, 0xC3, 0x87, 0x0E,
  0x10, 0x18, 0x70, 0xE1, 0xC2, 0x68, 0xC3, 0x87, 0x0E, 0x10, 0x18, 0x70,
  0x92, 0x24, 0x20, 0xC3, 0x87, 0x0E, 0x10, 0x1A, 0x74, 0xF3, 0xE7, 0x84,
  0xC3, 0x87, 0x09, 0x20, 0x02, 0x09, 0x61, 0xC3, 0x84, 0xC3, 0x87, 0x0E,
  0x10, 0x04, 0x84, 0x08, 0x10, 0x20, 0xF7, 0xEC, 0x08, 0x20, 0x02, 0x08,
  0x60, 0xC1, 0xEC, 0x34, 0x00, 0x09, 0xBC, 0x38, 0x4D, 0x80, 0xC1, 0x83,
  0x07, 0xA0, 0x18, 0x70, 0xE1, 0xC3, 0xE8, 0x34, 0x03, 0x0E, 0x0C, 0x38,
  0x4D, 0x00, 0x02, 0x04, 0x09, 0xB0, 0x18, 0x70, 0xE1, 0xC2, 0x6C, 0x34,
  0x03, 0x0F, 0xBC, 0x18, 0x0D, 0x00, 0x14, 0x28, 0x89, 0x00, 0x1E, 0x88,
  0x10, 0x20, 0x40, 0x34, 0x03, 0x09, 0xB0, 0x20, 0x7D, 0x00, 0xC1, 0x83,
  0x07, 0xA0, 0x18, 0x70, 0xE1, 0xC3, 0x84, 0x96, 0xC0, 0x08, 0x00, 0x10,
  0x04, 0x20, 0x8A, 0x80, 0xC3, 0x0C, 0x31, 0x03, 0x4E, 0x34, 0xD3, 0x10,
  0xB7, 0xC0, 0xF4, 0x03, 0x4E, 0x9D, 0x3A, 0x74, 0x80, 0xF4, 0x03, 0x0E,
  0x1C, 0x38, 0x70, 0x80, 0x34, 0x03, 0x0E, 0x1C, 0x38, 0x4D, 0x00, 0xF4,
  0x03, 0x0F, 0xAC, 0x18, 0x30, 0x00, 0x36, 0x03, 0x09, 0xB0, 0x20, 0x40,
  0x80, 0xF4, 0x03, 0x0E, 0x0C, 0x18, 0x30, 0x00, 0x36, 0x03, 0x01, 0xA0,
  0x20, 0x7D, 0x00, 0x21, 0xE8, 0x01, 0x02, 0x04, 0x48, 0x8A, 0xC2, 0x03,
  0x0E, 0x1C, 0x38, 0x4D, 0x80, 0xC2, 0x03, 0x0E, 0x12, 0x44, 0x84, 0x00,
  0xD2, 0x03, 0x4E, 0x9D, 0x3A, 0x7D, 0x00, 0xC2, 0x00, 0x90, 0x82, 0x44,
  0xB0, 0x80, 0xC2, 0x03, 0x09, 0xB0, 0x20, 0x7D, 0x00, 0xF6, 0x00, 0x10,
  0x82, 0x04, 0x3D, 0x80, 0x34, 0x6B, 0x0E, 0x10, 0x18, 0x70, 0xE1, 0xC2,
  0x68, 0x44, 0xC4, 0x04, 0x44, 0x4D, 0x34, 0x6B, 0x08, 0x10, 0x00, 0x84,
  0x10, 0x21, 0xEC, 0x34, 0x6B, 0x08, 0x10, 0x06, 0x80, 0xE1, 0xC2, 0x68,
  0x04, 0x08, 0x51, 0x20, 0x18, 0xBD, 0x82, 0x04, 0x08, 0xF7, 0xEF, 0x07,
  0xA0, 0x00, 0x40, 0xE1, 0xC2, 0x68, 0x14, 0x28, 0x86, 0x00, 0x1E, 0xB0,
  0xE1, 0xC2, 0x68, 0xF7, 0xEC, 0x08, 0x20, 0x02, 0x08, 0x60, 0xC1, 0x80,
  0x34, 0x6B, 0x0E, 0x10, 0x06, 0xB0, 0xE1, 0xC2, 0x68, 0x34, 0x6B, 0x0E,
  0x10, 0x06, 0xC0, 0x82, 0x04, 0x60, 0xE0, 0xE3, 0xC7, 0x88, 0x30, 0x02,
  0x08, 0x63, 0xC7, 0x8C, 0xA2, 0x80, 0x20, 0xC0, 0xB6, 0x40, 0xA2, 0x81,
  0x68, 0xE0, 0xDD, 0x88, 0x08, 0x88, 0x8D, 0xDD, 0x11, 0x01, 0x11, 0x1D,
  0x21, 0x41, 0x20, 0x44, 0x81, 0x10, 0x48, 0x50 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff7Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   8,    0,    0 },   // 0x00 ' ' 
  {65,     1,   7,  10,   8,    0,   -9 },   // 0x01 'A' 
  {66,    10,   7,  10,   8,    0,   -9 },   // 0x02 'B' 
  {67,    19,   7,  10,   8,    0,   -9 },   // 0x03 'C' 
  {68,    28,   7,  10,   8,    0,   -9 },   // 0x04 'D' 
  {69,    37,   7,  10,   8,    0,   -9 },   // 0x05 'E' 
  {70,    46,   7,  10,   8,    0,   -9 },   // 0x06 'F' 
  {71,    55,   7,  10,   8,    0,   -9 },   // 0x07 'G' 
  {72,    64,   7,  10,   8,    0,   -9 },   // 0x08 'H' 
  {73,    73,   4,  10,   8,    2,   -9 },   // 0x09 'I' 
  {74,    78,   7,  10,   8,    0,   -9 },   // 0x0A 'J' 
  {75,    87,   7,  10,   8,    0,   -9 },   // 0x0B 'K' 
  {76,    96,   7,  10,   8,    0,   -9 },   // 0x0C 'L' 
  {77,   105,   7,  10,   8,    0,   -9 },   // 0x0D 'M' 
  {78,   114,   7,  10,   8,    0,   -9 },   // 0x0E 'N' 
  {79,   123,   7,  10,   8,    0,   -9 },   // 0x0F 'O' 
  {80,   132,   7,  10,   8,    0,   -9 },   // 0x10 'P' 
  {81,   141,   7,  10,   8,    0,   -9 },   // 0x11 'Q' 
  {82,   150,   7,  10,   8,    0,   -9 },   // 0x12 'R' 
  {83,   159,   7,  10,   8,    0,   -9 },   // 0x13 'S' 
  {84,   168,   7,  10,   8,    0,   -9 },   // 0x14 'T' 
  {85,   177,   7,  10,   8,    0,   -9 },   // 0x15 'U' 
  {86,   186,   7,  10,   8,    0,   -9 },   // 0x16 'V' 
  {87,   195,   7,  10,   8,    0,   -9 },   // 0x17 'W' 
  {88,   204,   7,  10,   8,    0,   -9 },   // 0x18 'X' 
  {89,   213,   7,  10,   8,    0,   -9 },   // 0x19 'Y' 
  {90,   222,   7,  10,   8,    0,   -9 },   // 0x1A 'Z' 
  {97,   231,   7,   7,   8,    0,   -6 },   // 0x1B 'a' 
  {98,   238,   7,  10,   8,    0,   -9 },   // 0x1C 'b' 
  {99,   247,   7,   7,   8,    0,   -6 },   // 0x1D 'c' 
  {100,   254,   7,  10,   8,    0,   -9 },   // 0x1E 'd' 
  {101,   263,   7,   7,   8,    0,   -6 },   // 0x1F 'e' 
  {102,   270,   7,  10,   8,    0,   -9 },   // 0x20 'f' 
  {103,   279,   7,   7,   8,    0,   -6 },   // 0x21 'g' 
  {104,   286,   7,  10,   8,    0,   -9 },   // 0x22 'h' 
  {105,   295,   1,  10,   8,    3,   -9 },   // 0x23 'i' 
  {106,   297,   5,  10,   8,    1,   -9 },   // 0x24 'j' 
  {107,   304,   6,  10,   8,    0,   -9 },   // 0x25 'k' 
  {108,   312,   1,  10,   8,    3,   -9 },   // 0x26 'l' 
  {109,   314,   7,   7,   8,    0,   -6 },   // 0x27 'm' 
  {110,   321,   7,   7,   8,    0,   -6 },   // 0x28 'n' 
  {111,   328,   7,   7,   8,    0,   -6 },   // 0x29 'o' 
  {112,   335,   7,   7,   8,    0,   -6 },   // 0x2A 'p' 
  {113,   342,   7,   7,   8,    0,   -6 },   // 0x2B 'q' 
  {114,   349,   7,   7,   8,    0,   -6 },   // 0x2C 'r' 
  {115,   356,   7,   7,   8,    0,   -6 },   // 0x2D 's' 
  {116,   363,   7,   8,   8,    0,   -7 },   // 0x2E 't' 
  {117,   370,   7,   7,   8,    0,   -6 },   // 0x2F 'u' 
  {118,   377,   7,   7,   8,    0,   -6 },   // 0x30 'v' 
  {119,   384,   7,   7,   8,    0,   -6 },   // 0x31 'w' 
  {120,   391,   7,   7,   8,    0,   -6 },   // 0x32 'x' 
  {121,   398,   7,   7,   8,    0,   -6 },   // 0x33 'y' 
  {122,   405,   7,   7,   8,    0,   -6 },   // 0x34 'z' 
  {48,   412,   7,  10,   8,    0,   -9 },   // 0x35 '0' 
  {49,   421,   4,  10,   8,    2,   -9 },   // 0x36 '1' 
  {50,   426,   7,  10,   8,    0,   -9 },   // 0x37 '2' 
  {51,   435,   7,  10,   8,    0,   -9 },   // 0x38 '3' 
  {52,   444,   7,  10,   8,    0,   -9 },   // 0x39 '4' 
  {53,   453,   7,  10,   8,    0,   -9 },   // 0x3A '5' 
  {54,   462,   7,  10,   8,    0,   -9 },   // 0x3B '6' 
  {55,   471,   7,  10,   8,    0,   -9 },   // 0x3C '7' 
  {56,   480,   7,  10,   8,    0,   -9 },   // 0x3D '8' 
  {57,   489,   7,  10,   8,    0,   -9 },   // 0x3E '9' 
  {45,   498,   3,   1,   8,    2,   -3 },   // 0x3F '-' 
  {37,   499,   7,  10,   8,    0,   -9 },   // 0x40 '%' 
  {46,   508,   3,   3,   8,    2,   -2 },   // 0x41 '.' 
  {44,   510,   3,   4,   8,    2,   -3 },   // 0x42 ',' 
  {33,   512,   1,  10,   8,    3,   -9 },   // 0x43 '!' 
  {58,   514,   3,   7,   8,    2,   -6 },   // 0x44 ':' 
  {45,   517,   3,   1,   8,    2,   -3 },   // 0x45 '-' 
  {91,   518,   4,  10,   8,    2,   -9 },   // 0x46 '[' 
  {93,   523,   4,  10,   8,    2,   -9 },   // 0x47 ']' 
  {40,   528,   3,  10,   8,    2,   -9 },   // 0x48 '(' 
  {41,   532,   3,  10,   8,    2,   -9 }   // 0x49 ')' 
};

const gfxfont_t HotStuff7 PROGMEM = 
{
  (uint8_t  *)HotStuff7Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff7Glyphs, //< Glyph array
  74,// total glyphs in the string
  10,  // newline distance (y axis)
     0,  // minimum X - left most
     0,  // minimum Y - bottom most (descenders can drive this negative)
     7,  // maximum X - right most
    10}; // maximum Y - top most
// Approx. 1068 bytes -  but your mileage may vary.

#endif