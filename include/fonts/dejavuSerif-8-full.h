
#ifndef __FIXEDFONTDEJAVUSERIFTTF8
#define __FIXEDFONTDEJAVUSERIFTTF8
const uint8_t HotStuff8Bitmaps[] PROGMEM = {
  0x00, 0x06, 0x00, 0x60, 0x0B, 0x00, 0x90, 0x19, 0x01, 0x08, 0x10, 0x82,
  0x08, 0x3F, 0xC2, 0x04, 0x40, 0x2E, 0x07, 0xFE, 0x21, 0x90, 0x48, 0x24,
  0x33, 0xF1, 0x04, 0x81, 0x40, 0xA0, 0x50, 0x7F, 0xC0, 0x1F, 0x88, 0x34,
  0x06, 0x00, 0x80, 0x20, 0x08, 0x02, 0x00, 0x80, 0x10, 0x12, 0x08, 0x7C,
  0xFE, 0x08, 0x31, 0x01, 0x20, 0x34, 0x02, 0x80, 0x50, 0x0A, 0x01, 0x40,
  0x68, 0x09, 0x06, 0x7F, 0x00, 0xFF, 0xA0, 0x50, 0x28, 0x04, 0x23, 0xF1,
  0x08, 0x80, 0x40, 0x20, 0x50, 0x3F, 0xF0, 0xFF, 0xA0, 0x50, 0x28, 0x04,
  0x23, 0xF1, 0x08, 0x80, 0x40, 0x20, 0x10, 0x1E, 0x00, 0x1F, 0xC4, 0x0D,
  0x00, 0xC0, 0x08, 0x01, 0x00, 0x20, 0x3C, 0x01, 0x80, 0x28, 0x04, 0x81,
  0x8F, 0xC0, 0xE0, 0xE8, 0x09, 0x01, 0x20, 0x24, 0x04, 0xFF, 0x90, 0x12,
  0x02, 0x40, 0x48, 0x09, 0x01, 0x70, 0x70, 0xE9, 0x24, 0x92, 0x49, 0x70,
  0x1E, 0x08, 0x10, 0x20, 0x40, 0x81, 0x02, 0x04, 0x08, 0x10, 0x28, 0x51,
  0x1E, 0x00, 0xE7, 0x90, 0x84, 0x41, 0x20, 0x50, 0x18, 0x05, 0x01, 0x20,
  0x44, 0x10, 0x84, 0x13, 0x83, 0xE0, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01,
  0x00, 0x80, 0x40, 0x20, 0x50, 0x3F, 0xF0, 0xE0, 0x1D, 0x80, 0x65, 0x02,
  0x94, 0x0A, 0x48, 0x49, 0x21, 0x24, 0x48, 0x91, 0x22, 0x43, 0x09, 0x0C,
  0x24, 0x00, 0xB8, 0x07, 0xE0, 0xEE, 0x09, 0x41, 0x24, 0x24, 0x84, 0x88,
  0x90, 0x92, 0x12, 0x41, 0x48, 0x19, 0x03, 0x70, 0x20, 0x1F, 0x04, 0x11,
  0x01, 0x40, 0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x28, 0x08, 0x82,
  0x0F, 0x80, 0xFE, 0x20, 0x90, 0x28, 0x14, 0x0A, 0x09, 0xF8, 0x80, 0x40,
  0x20, 0x10, 0x1C, 0x00, 0x1F, 0x04, 0x11, 0x01, 0x40, 0x18, 0x03, 0x00,
  0x60, 0x0C, 0x01, 0x80, 0x28, 0x08, 0x82, 0x0F, 0x80, 0x20, 0x02, 0x00,
  0x30, 0xFE, 0x08, 0x21, 0x02, 0x20, 0x44, 0x08, 0x82, 0x1F, 0x82, 0x08,
  0x40, 0x88, 0x11, 0x02, 0x70, 0x30, 0x3E, 0xC3, 0x81, 0x80, 0x80, 0x70,
  0x0E, 0x03, 0x01, 0x81, 0xC3, 0x7C, 0xFF, 0xC4, 0x62, 0x21, 0x00, 0x80,
  0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x03, 0x80, 0xE0, 0xE8, 0x09, 0x01,
  0x20, 0x24, 0x04, 0x80, 0x90, 0x12, 0x02, 0x40, 0x48, 0x08, 0x82, 0x0F,
  0x80, 0xF0, 0x74, 0x02, 0x20, 0x42, 0x04, 0x20, 0x81, 0x08, 0x10, 0x80,
  0x90, 0x09, 0x00, 0x90, 0x06, 0x00, 0x60, 0xE1, 0x87, 0x41, 0x82, 0x41,
  0x82, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x14, 0x28, 0x14,
  0x28, 0x14, 0x28, 0x08, 0x10, 0x08, 0x10, 0xF1, 0xE4, 0x10, 0x44, 0x08,
  0x80, 0xA0, 0x08, 0x02, 0x80, 0x50, 0x11, 0x02, 0x20, 0x82, 0x78, 0xF0,
  0xF1, 0xE4, 0x10, 0x82, 0x08, 0x80, 0xA0, 0x14, 0x01, 0x00, 0x20, 0x04,
  0x00, 0x80, 0x10, 0x07, 0x00, 0xFF, 0xE0, 0x28, 0x10, 0x0C, 0x02, 0x01,
  0x00, 0x80, 0x40, 0x30, 0x08, 0x14, 0x07, 0xFF, 0x3C, 0x46, 0x02, 0x02,
  0x7E, 0x82, 0x82, 0xC6, 0x7B, 0xC0, 0x20, 0x10, 0x0B, 0xC6, 0x12, 0x05,
  0x02, 0x81, 0x40, 0xA0, 0x58, 0x5B, 0xC0, 0x3C, 0x8E, 0x0C, 0x08, 0x10,
  0x20, 0xA2, 0x3C, 0x03, 0x00, 0x80, 0x47, 0xA4, 0x34, 0x0A, 0x05, 0x02,
  0x81, 0x40, 0x90, 0xC7, 0xB0, 0x3C, 0x42, 0x81, 0x81, 0xFF, 0x80, 0x81,
  0x42, 0x3C, 0x3D, 0x14, 0x3E, 0x41, 0x04, 0x10, 0x41, 0x04, 0x3C, 0x3D,
  0xA1, 0xA0, 0x50, 0x28, 0x14, 0x0A, 0x04, 0x86, 0x3D, 0x00, 0x90, 0x87,
  0x80, 0xC0, 0x20, 0x10, 0x0B, 0xC6, 0x32, 0x09, 0x04, 0x82, 0x41, 0x20,
  0x90, 0x5C, 0x70, 0x48, 0x0C, 0x92, 0x49, 0x2E, 0x08, 0x40, 0x01, 0x84,
  0x21, 0x08, 0x42, 0x10, 0x86, 0x2E, 0xC0, 0x40, 0x40, 0x4F, 0x44, 0x48,
  0x50, 0x70, 0x48, 0x44, 0x42, 0xE7, 0xC9, 0x24, 0x92, 0x49, 0x70, 0xDC,
  0xE3, 0x18, 0x90, 0x84, 0x84, 0x24, 0x21, 0x21, 0x09, 0x08, 0x48, 0x42,
  0xE7, 0x38, 0xDE, 0x31, 0x90, 0x48, 0x24, 0x12, 0x09, 0x04, 0x82, 0xE3,
  0x80, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0xDE, 0x30,
  0x90, 0x28, 0x14, 0x0A, 0x05, 0x02, 0xC2, 0x5E, 0x20, 0x10, 0x1C, 0x00,
  0x3D, 0xA1, 0xA0, 0x50, 0x28, 0x14, 0x0A, 0x04, 0x86, 0x3D, 0x00, 0x80,
  0x40, 0x70, 0xDE, 0xC5, 0x02, 0x04, 0x08, 0x10, 0x20, 0xF0, 0x7D, 0x0E,
  0x0E, 0x07, 0x80, 0xE0, 0xE1, 0x7C, 0x41, 0x04, 0x3F, 0x41, 0x04, 0x10,
  0x41, 0x04, 0x4E, 0xC3, 0x20, 0x90, 0x48, 0x24, 0x12, 0x09, 0x04, 0xC6,
  0x3D, 0x80, 0xE3, 0xA0, 0x90, 0x44, 0x42, 0x20, 0xA0, 0x50, 0x28, 0x08,
  0x00, 0xE2, 0x3A, 0x10, 0x91, 0x44, 0x8A, 0x22, 0x92, 0x14, 0x50, 0xA2,
  0x82, 0x08, 0x10, 0x40, 0xE3, 0xA0, 0x88, 0x82, 0x80, 0x80, 0xA0, 0x88,
  0x82, 0xE3, 0x80, 0xE7, 0x42, 0x42, 0x24, 0x24, 0x28, 0x18, 0x18, 0x10,
  0x10, 0xA0, 0xE0, 0xFF, 0x08, 0x30, 0x41, 0x04, 0x18, 0xA1, 0xFE, 0x3C,
  0x42, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x42, 0x3C, 0x23,
  0x28, 0x42, 0x10, 0x84, 0x21, 0x09, 0xF0, 0x7C, 0xC2, 0x81, 0x01, 0x01,
  0x01, 0x02, 0x04, 0x08, 0x30, 0x61, 0xFF, 0x7C, 0xC3, 0x81, 0x01, 0x02,
  0x1C, 0x02, 0x01, 0x01, 0x81, 0xC2, 0x7C, 0x06, 0x07, 0x02, 0x82, 0x43,
  0x21, 0x11, 0x09, 0x84, 0xFF, 0x81, 0x00, 0x81, 0xF0, 0x7E, 0x40, 0x40,
  0x40, 0x7C, 0x42, 0x01, 0x01, 0x01, 0x81, 0xC2, 0x7C, 0x1E, 0x63, 0x41,
  0x80, 0xBC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0xFF, 0x81, 0x82,
  0x02, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x20, 0x3C, 0xC3, 0x81,
  0x81, 0xC3, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x3C, 0x42, 0x81,
  0x81, 0x81, 0x81, 0x43, 0x3D, 0x01, 0x82, 0xC6, 0x78, 0xF0, 0x70, 0x44,
  0x42, 0x22, 0x21, 0x13, 0x08, 0x90, 0x39, 0x00, 0x09, 0xC0, 0x91, 0x0C,
  0x88, 0x44, 0x44, 0x22, 0x20, 0xE0, 0xF0, 0x56, 0xFF, 0xFF, 0xCF, 0xF0,
  0x3C, 0xF2, 0x49, 0x24, 0x92, 0x49, 0xC0, 0xE4, 0x92, 0x49, 0x24, 0x93,
  0xC0, 0x29, 0x49, 0x24, 0x92, 0x44, 0x88, 0x89, 0x22, 0x49, 0x24, 0xA4,
  0xA0, 0x08, 0xC4, 0x23, 0x10, 0x84, 0x62, 0x11, 0x88, 0x00 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff8Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   5,    0,    0 },   // 0x00 ' ' 
  {65,     1,  12,  12,  12,    0,  -11 },   // 0x01 'A' 
  {66,    19,   9,  12,  12,    1,  -11 },   // 0x02 'B' 
  {67,    33,  10,  12,  12,    1,  -11 },   // 0x03 'C' 
  {68,    48,  11,  12,  13,    1,  -11 },   // 0x04 'D' 
  {69,    65,   9,  12,  12,    1,  -11 },   // 0x05 'E' 
  {70,    79,   9,  12,  11,    1,  -11 },   // 0x06 'F' 
  {71,    93,  11,  12,  13,    1,  -11 },   // 0x07 'G' 
  {72,   110,  11,  12,  13,    1,  -11 },   // 0x08 'H' 
  {73,   127,   3,  12,   5,    1,  -11 },   // 0x09 'I' 
  {74,   132,   7,  15,   6,   -2,  -11 },   // 0x0A 'J' 
  {75,   146,  10,  12,  11,    1,  -11 },   // 0x0B 'K' 
  {76,   161,   9,  12,  11,    1,  -11 },   // 0x0C 'L' 
  {77,   175,  14,  12,  16,    1,  -11 },   // 0x0D 'M' 
  {78,   196,  11,  12,  13,    1,  -11 },   // 0x0E 'N' 
  {79,   213,  11,  12,  13,    1,  -11 },   // 0x0F 'O' 
  {80,   230,   9,  12,  11,    1,  -11 },   // 0x10 'P' 
  {81,   244,  11,  15,  13,    1,  -11 },   // 0x11 'Q' 
  {82,   265,  11,  12,  12,    1,  -11 },   // 0x12 'R' 
  {83,   282,   8,  12,  10,    1,  -11 },   // 0x13 'S' 
  {84,   294,   9,  12,  11,    1,  -11 },   // 0x14 'T' 
  {85,   308,  11,  12,  13,    1,  -11 },   // 0x15 'U' 
  {86,   325,  12,  12,  12,    0,  -11 },   // 0x16 'V' 
  {87,   343,  16,  12,  16,    0,  -11 },   // 0x17 'W' 
  {88,   367,  11,  12,  11,    0,  -11 },   // 0x18 'X' 
  {89,   384,  11,  12,  11,    0,  -11 },   // 0x19 'Y' 
  {90,   401,  10,  12,  11,    1,  -11 },   // 0x1A 'Z' 
  {97,   416,   8,   9,  10,    1,   -8 },   // 0x1B 'a' 
  {98,   425,   9,  12,  11,    1,  -11 },   // 0x1C 'b' 
  {99,   439,   7,   9,   9,    1,   -8 },   // 0x1D 'c' 
  {100,   447,   9,  12,  11,    1,  -11 },   // 0x1E 'd' 
  {101,   461,   8,   9,  10,    1,   -8 },   // 0x1F 'e' 
  {102,   470,   6,  12,   6,    1,  -11 },   // 0x20 'f' 
  {103,   479,   9,  12,  11,    1,   -8 },   // 0x21 'g' 
  {104,   493,   9,  12,  11,    1,  -11 },   // 0x22 'h' 
  {105,   507,   3,  13,   5,    1,  -12 },   // 0x23 'i' 
  {106,   512,   5,  16,   4,   -2,  -12 },   // 0x24 'j' 
  {107,   522,   8,  12,  10,    1,  -11 },   // 0x25 'k' 
  {108,   534,   3,  12,   5,    1,  -11 },   // 0x26 'l' 
  {109,   539,  13,   9,  15,    1,   -8 },   // 0x27 'm' 
  {110,   554,   9,   9,  11,    1,   -8 },   // 0x28 'n' 
  {111,   565,   8,   9,  10,    1,   -8 },   // 0x29 'o' 
  {112,   574,   9,  12,  11,    1,   -8 },   // 0x2A 'p' 
  {113,   588,   9,  12,  11,    1,   -8 },   // 0x2B 'q' 
  {114,   602,   7,   9,   8,    1,   -8 },   // 0x2C 'r' 
  {115,   610,   7,   9,   9,    1,   -8 },   // 0x2D 's' 
  {116,   618,   6,  12,   7,    1,  -11 },   // 0x2E 't' 
  {117,   627,   9,   9,  11,    1,   -8 },   // 0x2F 'u' 
  {118,   638,   9,   9,   9,    0,   -8 },   // 0x30 'v' 
  {119,   649,  13,   9,  14,    0,   -8 },   // 0x31 'w' 
  {120,   664,   9,   9,   9,    0,   -8 },   // 0x32 'x' 
  {121,   675,   8,  12,   9,    1,   -8 },   // 0x33 'y' 
  {122,   687,   7,   9,   8,    1,   -8 },   // 0x34 'z' 
  {48,   695,   8,  12,  10,    1,  -11 },   // 0x35 '0' 
  {49,   707,   5,  12,  10,    2,  -11 },   // 0x36 '1' 
  {50,   715,   8,  12,  10,    1,  -11 },   // 0x37 '2' 
  {51,   727,   8,  12,  10,    1,  -11 },   // 0x38 '3' 
  {52,   739,   9,  12,  10,    1,  -11 },   // 0x39 '4' 
  {53,   753,   8,  12,  10,    1,  -11 },   // 0x3A '5' 
  {54,   765,   8,  12,  10,    1,  -11 },   // 0x3B '6' 
  {55,   777,   8,  12,  10,    1,  -11 },   // 0x3C '7' 
  {56,   789,   8,  12,  10,    1,  -11 },   // 0x3D '8' 
  {57,   801,   8,  12,  10,    1,  -11 },   // 0x3E '9' 
  {45,   813,   4,   1,   5,    1,   -4 },   // 0x3F '-' 
  {37,   814,  13,  12,  15,    1,  -11 },   // 0x40 '%' 
  {46,   834,   2,   2,   6,    2,   -1 },   // 0x41 '.' 
  {44,   835,   2,   4,   5,    1,   -1 },   // 0x42 ',' 
  {33,   836,   2,  12,   6,    2,  -11 },   // 0x43 '!' 
  {58,   839,   2,   7,   5,    2,   -6 },   // 0x44 ':' 
  {91,   841,   3,  14,   6,    1,  -11 },   // 0x45 '[' 
  {93,   847,   3,  14,   6,    1,  -11 },   // 0x46 ']' 
  {40,   853,   3,  15,   6,    1,  -11 },   // 0x47 '(' 
  {41,   859,   3,  15,   6,    1,  -11 },   // 0x48 ')' 
  {47,   865,   5,  13,   5,    0,  -11 }   // 0x49 '/' 
};

const gfxfont_t HotStuff8 PROGMEM = 
{
  (uint8_t  *)HotStuff8Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff8Glyphs, //< Glyph array
  74,// total glyphs in the string
  16,  // newline distance (y axis)
    -2,  // minimum X - left most
    -3,  // minimum Y - bottom most (descenders can drive this negative)
    16,  // maximum X - right most
    13}; // maximum Y - top most
// Approx. 1406 bytes -  but your mileage may vary.

#endif