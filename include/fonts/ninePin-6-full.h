
#ifndef __FIXEDFONTNINEPINTTF6
#define __FIXEDFONTNINEPINTTF6
const uint8_t HotStuff6Bitmaps[] PROGMEM = {
  0x00, 0x10, 0x00, 0xD4, 0x10, 0x16, 0xE0, 0xC1, 0x01, 0x04, 0xB4, 0x02,
  0x0C, 0x10, 0x16, 0xA0, 0xC1, 0x01, 0x68, 0x34, 0x02, 0x0C, 0x00, 0x10,
  0x20, 0x41, 0x00, 0x68, 0xB4, 0x02, 0x0C, 0x10, 0x10, 0x60, 0xC1, 0x01,
  0x68, 0xB6, 0x02, 0x04, 0x00, 0x16, 0xA0, 0x40, 0x01, 0x6C, 0xB6, 0x02,
  0x04, 0x00, 0x16, 0xA0, 0x40, 0x01, 0x00, 0x34, 0x02, 0x0C, 0x00, 0x12,
  0xE0, 0xC1, 0x00, 0x68, 0x82, 0x02, 0x0C, 0x10, 0x16, 0xE0, 0xC1, 0x01,
  0x04, 0xA8, 0x08, 0x40, 0x10, 0x84, 0x05, 0x40, 0x16, 0x00, 0x10, 0x20,
  0x00, 0xA1, 0x42, 0x00, 0x60, 0x82, 0x02, 0x14, 0x80, 0x14, 0x24, 0x42,
  0x01, 0x04, 0x80, 0x02, 0x04, 0x00, 0x10, 0x20, 0x40, 0x01, 0x6C, 0x82,
  0x02, 0x9C, 0x90, 0x10, 0x60, 0xC1, 0x01, 0x04, 0x82, 0x02, 0x8D, 0x10,
  0x12, 0x61, 0xC3, 0x01, 0x04, 0x34, 0x02, 0x0C, 0x10, 0x10, 0x60, 0xC1,
  0x00, 0x68, 0xB4, 0x02, 0x0C, 0x10, 0x16, 0xA0, 0x40, 0x01, 0x00, 0x34,
  0x02, 0x0C, 0x10, 0x10, 0x60, 0xC2, 0x00, 0x64, 0xB4, 0x02, 0x0C, 0x10,
  0x16, 0xA0, 0xC1, 0x01, 0x04, 0x34, 0x02, 0x0C, 0x00, 0x06, 0x80, 0xC1,
  0x00, 0x68, 0xB6, 0x00, 0x40, 0x80, 0x02, 0x04, 0x08, 0x00, 0x20, 0x82,
  0x02, 0x0C, 0x10, 0x10, 0x60, 0xC1, 0x00, 0x68, 0x82, 0x02, 0x0C, 0x10,
  0x10, 0x60, 0x92, 0x00, 0x20, 0x82, 0x02, 0x0C, 0x10, 0x12, 0x69, 0xC1,
  0x01, 0x04, 0x82, 0x02, 0x09, 0x20, 0x02, 0x09, 0x41, 0x01, 0x04, 0x82,
  0x02, 0x09, 0x20, 0x02, 0x04, 0x08, 0x00, 0x20, 0xB6, 0x00, 0x08, 0x20,
  0x02, 0x08, 0x40, 0x01, 0x6C, 0x34, 0x02, 0x0C, 0x18, 0x60, 0x0C, 0x80,
  0x80, 0x02, 0x04, 0xA0, 0x14, 0x60, 0xC1, 0x00, 0x68, 0x34, 0x02, 0x0C,
  0x08, 0x20, 0x0D, 0x00, 0x02, 0x00, 0x09, 0x90, 0x10, 0xE0, 0xC1, 0x00,
  0x68, 0x34, 0x02, 0x0D, 0xB8, 0x00, 0x0D, 0x00, 0x14, 0x00, 0x89, 0x00,
  0x16, 0x08, 0x10, 0x00, 0x40, 0x35, 0x04, 0x04, 0x13, 0x60, 0x00, 0x9A,
  0x80, 0x02, 0x04, 0xA0, 0x14, 0x60, 0xC1, 0x01, 0x04, 0x97, 0x40, 0x04,
  0x00, 0x01, 0x04, 0x00, 0x41, 0x02, 0x13, 0x00, 0x80, 0x02, 0x0C, 0x20,
  0x12, 0x2C, 0x42, 0x01, 0x04, 0xA0, 0x08, 0x40, 0x10, 0x84, 0x05, 0x40,
  0xA4, 0x02, 0x4C, 0x18, 0x20, 0x20, 0x80, 0xB4, 0x02, 0x0C, 0x18, 0x20,
  0x20, 0x80, 0x34, 0x02, 0x0C, 0x18, 0x20, 0x0D, 0x00, 0xB5, 0x04, 0x04,
  0x1B, 0x40, 0x20, 0x40, 0x37, 0x04, 0x04, 0x13, 0x60, 0x00, 0x81, 0x94,
  0x02, 0x8C, 0x08, 0x00, 0x20, 0x00, 0x34, 0x02, 0x01, 0xA0, 0x20, 0x2D,
  0x00, 0x20, 0x09, 0x50, 0x10, 0x84, 0x00, 0x40, 0x82, 0x02, 0x0C, 0x18,
  0x60, 0x0C, 0x80, 0x82, 0x02, 0x0C, 0x12, 0x40, 0x04, 0x00, 0x82, 0x02,
  0x0C, 0x19, 0x20, 0x09, 0x00, 0x82, 0x02, 0x09, 0xA8, 0x20, 0x20, 0x80,
  0x83, 0x04, 0x01, 0xA0, 0x40, 0x01, 0x08, 0xB6, 0x00, 0x09, 0xA8, 0x00,
  0x2D, 0x80, 0x34, 0x02, 0x0C, 0x30, 0x12, 0x68, 0xC1, 0x00, 0x68, 0x20,
  0x28, 0x40, 0x10, 0x84, 0x05, 0x40, 0x34, 0x02, 0x0C, 0x10, 0x00, 0x84,
  0x10, 0x01, 0x6C, 0x34, 0x02, 0x08, 0x10, 0x06, 0x80, 0xC1, 0x00, 0x68,
  0x82, 0x02, 0x0C, 0x10, 0x16, 0xC0, 0x81, 0x00, 0x04, 0xB6, 0x02, 0x04,
  0x00, 0x16, 0x80, 0x81, 0x01, 0x68, 0x34, 0x02, 0x0C, 0x00, 0x16, 0xA0,
  0xC1, 0x00, 0x68, 0xB6, 0x00, 0x08, 0x10, 0x00, 0x81, 0x08, 0x00, 0x20,
  0x34, 0x02, 0x0C, 0x10, 0x06, 0xA0, 0xC1, 0x00, 0x68, 0x34, 0x02, 0x0C,
  0x10, 0x06, 0xC0, 0xC1, 0x00, 0x68, 0xB4, 0x02, 0x02, 0x8D, 0x20, 0x02,
  0x09, 0xC3, 0x01, 0x00, 0x80, 0xA0, 0xC0, 0xB6, 0x40, 0x88, 0xB4, 0xA8,
  0x21, 0x00, 0x42, 0x10, 0x05, 0x40, 0xA8, 0x02, 0x10, 0x04, 0x21, 0x05,
  0x40, 0x14, 0x02, 0x20, 0x02, 0x08, 0x08, 0x00, 0x50, 0xA0, 0x01, 0x01,
  0x00, 0x10, 0x44, 0x02, 0x80 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff6Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   8,    0,    0 },   // 0x00 ' ' 
  {65,     1,   7,  10,   8,    0,   -9 },   // 0x01 'A' 
  {66,    10,   7,  10,   8,    0,   -9 },   // 0x02 'B' 
  {67,    19,   7,  10,   8,    0,   -9 },   // 0x03 'C' 
  {68,    28,   7,  10,   8,    0,   -9 },   // 0x04 'D' 
  {69,    37,   7,  10,   8,    0,   -9 },   // 0x05 'E' 
  {70,    46,   7,  10,   8,    0,   -9 },   // 0x06 'F' 
  {71,    55,   7,  10,   8,    0,   -9 },   // 0x07 'G' 
  {72,    64,   7,  10,   8,    0,   -9 },   // 0x08 'H' 
  {73,    73,   5,  10,   8,    1,   -9 },   // 0x09 'I' 
  {74,    80,   7,  10,   8,    0,   -9 },   // 0x0A 'J' 
  {75,    89,   7,  10,   8,    0,   -9 },   // 0x0B 'K' 
  {76,    98,   7,  10,   8,    0,   -9 },   // 0x0C 'L' 
  {77,   107,   7,  10,   8,    0,   -9 },   // 0x0D 'M' 
  {78,   116,   7,  10,   8,    0,   -9 },   // 0x0E 'N' 
  {79,   125,   7,  10,   8,    0,   -9 },   // 0x0F 'O' 
  {80,   134,   7,  10,   8,    0,   -9 },   // 0x10 'P' 
  {81,   143,   7,  10,   8,    0,   -9 },   // 0x11 'Q' 
  {82,   152,   7,  10,   8,    0,   -9 },   // 0x12 'R' 
  {83,   161,   7,  10,   8,    0,   -9 },   // 0x13 'S' 
  {84,   170,   7,  10,   8,    0,   -9 },   // 0x14 'T' 
  {85,   179,   7,  10,   8,    0,   -9 },   // 0x15 'U' 
  {86,   188,   7,  10,   8,    0,   -9 },   // 0x16 'V' 
  {87,   197,   7,  10,   8,    0,   -9 },   // 0x17 'W' 
  {88,   206,   7,  10,   8,    0,   -9 },   // 0x18 'X' 
  {89,   215,   7,  10,   8,    0,   -9 },   // 0x19 'Y' 
  {90,   224,   7,  10,   8,    0,   -9 },   // 0x1A 'Z' 
  {97,   233,   7,   7,   8,    0,   -6 },   // 0x1B 'a' 
  {98,   240,   7,  10,   8,    0,   -9 },   // 0x1C 'b' 
  {99,   249,   7,   7,   8,    0,   -6 },   // 0x1D 'c' 
  {100,   256,   7,  10,   8,    0,   -9 },   // 0x1E 'd' 
  {101,   265,   7,   7,   8,    0,   -6 },   // 0x1F 'e' 
  {102,   272,   7,  10,   8,    0,   -9 },   // 0x20 'f' 
  {103,   281,   7,   8,   8,    0,   -6 },   // 0x21 'g' 
  {104,   288,   7,  10,   8,    0,   -9 },   // 0x22 'h' 
  {105,   297,   1,  10,   7,    3,   -9 },   // 0x23 'i' 
  {106,   299,   6,  11,   8,    0,   -9 },   // 0x24 'j' 
  {107,   308,   7,  10,   8,    0,   -9 },   // 0x25 'k' 
  {108,   317,   5,  10,   8,    1,   -9 },   // 0x26 'l' 
  {109,   324,   7,   7,   8,    0,   -6 },   // 0x27 'm' 
  {110,   331,   7,   7,   8,    0,   -6 },   // 0x28 'n' 
  {111,   338,   7,   7,   8,    0,   -6 },   // 0x29 'o' 
  {112,   345,   7,   8,   8,    0,   -6 },   // 0x2A 'p' 
  {113,   352,   7,   8,   8,    0,   -6 },   // 0x2B 'q' 
  {114,   359,   7,   7,   8,    0,   -6 },   // 0x2C 'r' 
  {115,   366,   7,   7,   8,    0,   -6 },   // 0x2D 's' 
  {116,   373,   5,  10,   8,    1,   -9 },   // 0x2E 't' 
  {117,   380,   7,   7,   8,    0,   -6 },   // 0x2F 'u' 
  {118,   387,   7,   7,   8,    0,   -6 },   // 0x30 'v' 
  {119,   394,   7,   7,   8,    0,   -6 },   // 0x31 'w' 
  {120,   401,   7,   7,   8,    0,   -6 },   // 0x32 'x' 
  {121,   408,   7,   8,   8,    0,   -6 },   // 0x33 'y' 
  {122,   415,   7,   7,   8,    0,   -6 },   // 0x34 'z' 
  {48,   422,   7,  10,   8,    0,   -9 },   // 0x35 '0' 
  {49,   431,   5,  10,   8,    1,   -9 },   // 0x36 '1' 
  {50,   438,   7,  10,   8,    0,   -9 },   // 0x37 '2' 
  {51,   447,   7,  10,   8,    0,   -9 },   // 0x38 '3' 
  {52,   456,   7,  10,   8,    0,   -9 },   // 0x39 '4' 
  {53,   465,   7,  10,   8,    0,   -9 },   // 0x3A '5' 
  {54,   474,   7,  10,   8,    0,   -9 },   // 0x3B '6' 
  {55,   483,   7,  10,   8,    0,   -9 },   // 0x3C '7' 
  {56,   492,   7,  10,   8,    0,   -9 },   // 0x3D '8' 
  {57,   501,   7,  10,   8,    0,   -9 },   // 0x3E '9' 
  {45,   510,   6,   1,   8,    0,   -4 },   // 0x3F '-' 
  {37,   511,   7,  10,   8,    0,   -9 },   // 0x40 '%' 
  {46,   520,   1,   1,   7,    3,    0 },   // 0x41 '.' 
  {44,   521,   3,   4,   7,    1,   -2 },   // 0x42 ',' 
  {33,   523,   1,  10,   7,    3,   -9 },   // 0x43 '!' 
  {58,   525,   1,   5,   7,    1,   -6 },   // 0x44 ':' 
  {45,   526,   6,   1,   8,    0,   -4 },   // 0x45 '-' 
  {91,   527,   5,  10,   8,    1,   -9 },   // 0x46 '[' 
  {93,   534,   5,  10,   8,    1,   -9 },   // 0x47 ']' 
  {40,   541,   6,  10,   8,    0,   -9 },   // 0x48 '(' 
  {41,   549,   6,  10,   8,    1,   -9 }   // 0x49 ')' 
};

const gfxfont_t HotStuff6 PROGMEM = 
{
  (uint8_t  *)HotStuff6Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff6Glyphs, //< Glyph array
  74,// total glyphs in the string
  11,  // newline distance (y axis)
     0,  // minimum X - left most
    -1,  // minimum Y - bottom most (descenders can drive this negative)
     7,  // maximum X - right most
    10}; // maximum Y - top most
// Approx. 1089 bytes -  but your mileage may vary.

#endif