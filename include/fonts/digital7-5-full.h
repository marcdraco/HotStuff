
#ifndef __FIXEDFONTDIGITALMONOTTF5
#define __FIXEDFONTDIGITALMONOTTF5
const uint8_t HotStuff5Bitmaps[] PROGMEM = {
  0x00, 0xF9, 0xE9, 0x99, 0xF9, 0xE9, 0x9E, 0xE8, 0x88, 0x8F, 0xF9, 0x89,
  0x9E, 0xE8, 0xE8, 0x8F, 0xE8, 0xE8, 0x88, 0xE8, 0x89, 0x9F, 0x99, 0xE9,
  0x99, 0xF8, 0x11, 0x09, 0x9F, 0xBE, 0xE9, 0x99, 0x88, 0x88, 0x8F, 0xFB,
  0xA9, 0x99, 0xDB, 0x89, 0x99, 0xF9, 0x89, 0x96, 0xF9, 0xE8, 0x88, 0xF9,
  0x89, 0xBF, 0xF9, 0xEC, 0xA9, 0xF8, 0xE1, 0x1F, 0x72, 0x02, 0x22, 0x99,
  0x89, 0x9F, 0x99, 0x89, 0x62, 0x99, 0x8B, 0xBF, 0x56, 0x26, 0x59, 0x99,
  0xE1, 0x1F, 0x72, 0x24, 0x4F, 0xF9, 0xE9, 0x99, 0xF9, 0xE9, 0x9E, 0xE8,
  0x88, 0x8F, 0xF9, 0x89, 0x9E, 0xE8, 0xE8, 0x8F, 0xE8, 0xE8, 0x88, 0xE8,
  0x89, 0x9F, 0x99, 0xE9, 0x99, 0xF8, 0x11, 0x09, 0x9F, 0xBE, 0xE9, 0x99,
  0x88, 0x88, 0x8F, 0xFB, 0xA9, 0x99, 0xDB, 0x89, 0x99, 0xF9, 0x89, 0x96,
  0xF9, 0xE8, 0x88, 0xF9, 0x89, 0xBF, 0xF9, 0xEC, 0xA9, 0xF8, 0xE1, 0x1F,
  0x72, 0x02, 0x22, 0x99, 0x89, 0x9F, 0x99, 0x89, 0x62, 0x99, 0x8B, 0xBF,
  0x56, 0x26, 0x59, 0x99, 0xE1, 0x1F, 0x72, 0x24, 0x4F, 0xF9, 0x89, 0x9F,
  0xDC, 0x71, 0x68, 0x8F, 0x71, 0x61, 0x1F, 0x99, 0xE1, 0x11, 0xE8, 0xE1,
  0x1F, 0xE8, 0xE9, 0x9F, 0xF9, 0x81, 0x11, 0xF9, 0xE9, 0x9F, 0xF9, 0xE1,
  0x1F, 0xC0, 0xDE, 0x24, 0x5B, 0x80, 0xC0, 0xFC, 0x90, 0xEA, 0xB0, 0x51,
  0x50, 0xD2, 0x48, 0x80, 0xD1, 0x70, 0x12, 0x24, 0x48 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff5Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   4,    0,    0 },   // 0x00 ' ' 
  {65,     1,   4,   6,   4,    0,   -5 },   // 0x01 'A' 
  {66,     4,   4,   6,   4,    0,   -5 },   // 0x02 'B' 
  {67,     7,   4,   6,   4,    0,   -5 },   // 0x03 'C' 
  {68,    10,   4,   6,   4,    0,   -5 },   // 0x04 'D' 
  {69,    13,   4,   6,   4,    0,   -5 },   // 0x05 'E' 
  {70,    16,   4,   6,   4,    0,   -5 },   // 0x06 'F' 
  {71,    19,   4,   6,   4,    0,   -5 },   // 0x07 'G' 
  {72,    22,   4,   6,   4,    0,   -5 },   // 0x08 'H' 
  {73,    25,   1,   6,   4,    2,   -5 },   // 0x09 'I' 
  {74,    26,   4,   6,   4,    0,   -5 },   // 0x0A 'J' 
  {75,    29,   4,   6,   4,    0,   -5 },   // 0x0B 'K' 
  {76,    32,   4,   6,   4,    0,   -5 },   // 0x0C 'L' 
  {77,    35,   4,   6,   4,    0,   -5 },   // 0x0D 'M' 
  {78,    38,   4,   6,   4,    0,   -5 },   // 0x0E 'N' 
  {79,    41,   4,   6,   4,    0,   -5 },   // 0x0F 'O' 
  {80,    44,   4,   6,   4,    0,   -5 },   // 0x10 'P' 
  {81,    47,   4,   6,   4,    0,   -5 },   // 0x11 'Q' 
  {82,    50,   4,   6,   4,    0,   -5 },   // 0x12 'R' 
  {83,    53,   4,   6,   4,    0,   -5 },   // 0x13 'S' 
  {84,    56,   4,   6,   4,    0,   -5 },   // 0x14 'T' 
  {85,    59,   4,   6,   4,    0,   -5 },   // 0x15 'U' 
  {86,    62,   4,   6,   4,    0,   -5 },   // 0x16 'V' 
  {87,    65,   4,   6,   4,    0,   -5 },   // 0x17 'W' 
  {88,    68,   4,   6,   4,    0,   -5 },   // 0x18 'X' 
  {89,    71,   4,   6,   4,    0,   -5 },   // 0x19 'Y' 
  {90,    74,   4,   6,   4,    0,   -5 },   // 0x1A 'Z' 
  {97,    77,   4,   6,   4,    0,   -5 },   // 0x1B 'a' 
  {98,    80,   4,   6,   4,    0,   -5 },   // 0x1C 'b' 
  {99,    83,   4,   6,   4,    0,   -5 },   // 0x1D 'c' 
  {100,    86,   4,   6,   4,    0,   -5 },   // 0x1E 'd' 
  {101,    89,   4,   6,   4,    0,   -5 },   // 0x1F 'e' 
  {102,    92,   4,   6,   4,    0,   -5 },   // 0x20 'f' 
  {103,    95,   4,   6,   4,    0,   -5 },   // 0x21 'g' 
  {104,    98,   4,   6,   4,    0,   -5 },   // 0x22 'h' 
  {105,   101,   1,   6,   4,    2,   -5 },   // 0x23 'i' 
  {106,   102,   4,   6,   4,    0,   -5 },   // 0x24 'j' 
  {107,   105,   4,   6,   4,    0,   -5 },   // 0x25 'k' 
  {108,   108,   4,   6,   4,    0,   -5 },   // 0x26 'l' 
  {109,   111,   4,   6,   4,    0,   -5 },   // 0x27 'm' 
  {110,   114,   4,   6,   4,    0,   -5 },   // 0x28 'n' 
  {111,   117,   4,   6,   4,    0,   -5 },   // 0x29 'o' 
  {112,   120,   4,   6,   4,    0,   -5 },   // 0x2A 'p' 
  {113,   123,   4,   6,   4,    0,   -5 },   // 0x2B 'q' 
  {114,   126,   4,   6,   4,    0,   -5 },   // 0x2C 'r' 
  {115,   129,   4,   6,   4,    0,   -5 },   // 0x2D 's' 
  {116,   132,   4,   6,   4,    0,   -5 },   // 0x2E 't' 
  {117,   135,   4,   6,   4,    0,   -5 },   // 0x2F 'u' 
  {118,   138,   4,   6,   4,    0,   -5 },   // 0x30 'v' 
  {119,   141,   4,   6,   4,    0,   -5 },   // 0x31 'w' 
  {120,   144,   4,   6,   4,    0,   -5 },   // 0x32 'x' 
  {121,   147,   4,   6,   4,    0,   -5 },   // 0x33 'y' 
  {122,   150,   4,   6,   4,    0,   -5 },   // 0x34 'z' 
  {48,   153,   4,   6,   4,    0,   -5 },   // 0x35 '0' 
  {49,   156,   1,   6,   4,    3,   -5 },   // 0x36 '1' 
  {50,   157,   4,   6,   4,    0,   -5 },   // 0x37 '2' 
  {51,   160,   4,   6,   4,    0,   -5 },   // 0x38 '3' 
  {52,   163,   4,   6,   4,    0,   -5 },   // 0x39 '4' 
  {53,   166,   4,   6,   4,    0,   -5 },   // 0x3A '5' 
  {54,   169,   4,   6,   4,    0,   -5 },   // 0x3B '6' 
  {55,   172,   4,   6,   4,    0,   -5 },   // 0x3C '7' 
  {56,   175,   4,   6,   4,    0,   -5 },   // 0x3D '8' 
  {57,   178,   4,   6,   4,    0,   -5 },   // 0x3E '9' 
  {45,   181,   3,   1,   4,    1,   -3 },   // 0x3F '-' 
  {37,   182,   4,   6,   4,    0,   -5 },   // 0x40 '%' 
  {46,   185,   1,   1,   4,    2,    0 },   // 0x41 '.' 
  {44,   186,   1,   2,   4,    2,    0 },   // 0x42 ',' 
  {33,   187,   1,   6,   4,    2,   -5 },   // 0x43 '!' 
  {58,   188,   1,   4,   4,    2,   -4 },   // 0x44 ':' 
  {91,   189,   2,   6,   4,    0,   -5 },   // 0x45 '[' 
  {93,   191,   2,   6,   4,    2,   -5 },   // 0x46 ']' 
  {40,   193,   3,   6,   4,    0,   -5 },   // 0x47 '(' 
  {41,   196,   2,   6,   4,    2,   -5 },   // 0x48 ')' 
  {47,   198,   4,   6,   4,    0,   -5 }   // 0x49 '/' 
};

const gfxfont_t HotStuff5 PROGMEM = 
{
  (uint8_t  *)HotStuff5Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff5Glyphs, //< Glyph array
  74,// total glyphs in the string
   6,  // newline distance (y axis)
     0,  // minimum X - left most
    -1,  // minimum Y - bottom most (descenders can drive this negative)
     4,  // maximum X - right most
     6}; // maximum Y - top most
// Approx. 733 bytes -  but your mileage may vary.

#endif