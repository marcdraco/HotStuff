
#ifndef __FIXEDFONTCOURIERPRIMEREGULARTTF5
#define __FIXEDFONTCOURIERPRIMEREGULARTTF5
const uint8_t HotStuff5Bitmaps[] PROGMEM = {
  0x00, 0xEA, 0xF0, 0xF6, 0xA0, 0x28, 0xA7, 0xD4, 0xF9, 0x46, 0x00, 0x4F,
  0xD6, 0xDF, 0x40, 0xC2, 0xAD, 0x0B, 0x54, 0x30, 0xF4, 0xA1, 0xBB, 0x7C,
  0xE8, 0x72, 0x49, 0x11, 0xC8, 0x92, 0x54, 0x4D, 0x6A, 0x21, 0x3E, 0x42,
  0x00, 0xE0, 0xF0, 0xF0, 0x12, 0x24, 0x48, 0x80, 0x69, 0x99, 0x96, 0x65,
  0x08, 0x42, 0x7C, 0xF9, 0x16, 0x9F, 0xF9, 0x61, 0x1E, 0x13, 0x95, 0xF1,
  0x1C, 0xF8, 0xE1, 0x1E, 0x34, 0xE9, 0x96, 0xF9, 0x22, 0x24, 0xF9, 0x69,
  0x96, 0x69, 0x97, 0x2C, 0xF3, 0xC0, 0xF0, 0xE0, 0x1E, 0x87, 0xF0, 0xF0,
  0x87, 0x1E, 0xE9, 0x34, 0x66, 0x79, 0xDB, 0x6F, 0x81, 0xC0, 0x70, 0xC5,
  0x0E, 0x4B, 0xF0, 0xFA, 0x5E, 0x94, 0xF8, 0x79, 0x88, 0x97, 0xF2, 0x52,
  0x94, 0xF8, 0xFA, 0xDC, 0xA4, 0xFC, 0xFA, 0xDC, 0xA4, 0x70, 0x74, 0xA1,
  0xF9, 0x38, 0xFD, 0x27, 0x92, 0x4B, 0xF0, 0xF9, 0x08, 0x42, 0x78, 0xF9,
  0x09, 0x4A, 0x70, 0xED, 0x27, 0x14, 0x4B, 0xB0, 0xF2, 0x10, 0x94, 0xFC,
  0x49, 0x27, 0x9A, 0x4B, 0xF0, 0xDD, 0xA6, 0x9A, 0x5B, 0xA0, 0x74, 0x63,
  0x18, 0xB8, 0xF2, 0x52, 0xE4, 0x70, 0x74, 0x63, 0x18, 0xB9, 0xE0, 0xF1,
  0x24, 0x9C, 0x5B, 0xB0, 0xF9, 0xC3, 0x9F, 0xFB, 0xB2, 0x27, 0xFD, 0x24,
  0x92, 0x48, 0xC0, 0xCD, 0x24, 0x94, 0x30, 0xC0, 0xCE, 0x2B, 0x9E, 0x49,
  0x20, 0x78, 0xC3, 0x0C, 0x4B, 0xF0, 0xCD, 0x22, 0x84, 0x10, 0xE0, 0xFA,
  0x44, 0x9F, 0xF2, 0x49, 0x27, 0x88, 0x44, 0x22, 0x10, 0xE4, 0x92, 0x4F,
  0x46, 0x90, 0xFC, 0x8C, 0xE0, 0xBD, 0x2F, 0x80, 0xC3, 0x92, 0x94, 0xF8,
  0x79, 0x88, 0x70, 0x30, 0x9D, 0x29, 0x3C, 0x64, 0xBD, 0x07, 0x80, 0x72,
  0x7C, 0x84, 0x78, 0x7C, 0xA5, 0x27, 0x0B, 0x80, 0xC1, 0x66, 0x92, 0x4B,
  0xF0, 0x21, 0x18, 0x42, 0x13, 0xE0, 0x11, 0x71, 0x11, 0x11, 0xF0, 0xC1,
  0x65, 0x18, 0x53, 0xB0, 0x61, 0x08, 0x42, 0x7C, 0xFC, 0xA9, 0x52, 0xAF,
  0xE0, 0xF9, 0x24, 0x92, 0xFC, 0x69, 0x99, 0x60, 0xF2, 0x52, 0x97, 0x23,
  0x80, 0x7C, 0xA5, 0x27, 0x08, 0xE0, 0xDB, 0x10, 0x8F, 0x00, 0xF9, 0x69,
  0xF0, 0x42, 0x3C, 0x84, 0xB8, 0xD9, 0x24, 0x92, 0x7C, 0xCD, 0x25, 0x0C,
  0x30, 0xCE, 0xA7, 0x9E, 0x48, 0xFC, 0xC2, 0x14, 0xFC, 0xCD, 0x25, 0x0C,
  0x20, 0x8C, 0x00, 0xFA, 0x49, 0xF0, 0x69, 0x44, 0x93, 0xFF, 0xC9, 0x14,
  0x94, 0xF0 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff5Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   6,    0,    0 },   // 0x00 ' ' 
  {33,     1,   2,   6,   6,    2,   -5 },   // 0x01 '!' 
  {34,     3,   4,   3,   6,    1,   -5 },   // 0x02 '"' 
  {35,     5,   6,   7,   6,    0,   -6 },   // 0x03 '#' 
  {36,    11,   4,   7,   6,    1,   -5 },   // 0x04 '$' 
  {37,    15,   6,   6,   6,    0,   -5 },   // 0x05 '%' 
  {38,    20,   5,   6,   6,    1,   -5 },   // 0x06 '&' 
  {39,    24,   2,   3,   6,    2,   -5 },   // 0x07 ''' 
  {40,    25,   3,   8,   6,    1,   -5 },   // 0x08 '(' 
  {41,    28,   3,   8,   6,    2,   -5 },   // 0x09 ')' 
  {42,    31,   4,   4,   6,    1,   -5 },   // 0x0A '*' 
  {43,    33,   5,   5,   6,    1,   -5 },   // 0x0B '+' 
  {44,    37,   2,   2,   6,    2,    0 },   // 0x0C ',' 
  {45,    38,   4,   1,   6,    1,   -2 },   // 0x0D '-' 
  {46,    39,   2,   2,   6,    2,   -1 },   // 0x0E '.' 
  {47,    40,   4,   7,   6,    1,   -5 },   // 0x0F '/' 
  {48,    44,   4,   6,   6,    1,   -5 },   // 0x10 '0' 
  {49,    47,   5,   6,   6,    1,   -5 },   // 0x11 '1' 
  {50,    51,   4,   6,   6,    1,   -5 },   // 0x12 '2' 
  {51,    54,   4,   6,   6,    1,   -5 },   // 0x13 '3' 
  {52,    57,   5,   6,   6,    0,   -5 },   // 0x14 '4' 
  {53,    61,   4,   6,   6,    1,   -5 },   // 0x15 '5' 
  {54,    64,   4,   6,   6,    1,   -5 },   // 0x16 '6' 
  {55,    67,   4,   6,   6,    1,   -5 },   // 0x17 '7' 
  {56,    70,   4,   6,   6,    1,   -5 },   // 0x18 '8' 
  {57,    73,   4,   6,   6,    1,   -5 },   // 0x19 '9' 
  {58,    76,   2,   5,   6,    2,   -4 },   // 0x1A ':' 
  {59,    78,   2,   6,   6,    2,   -4 },   // 0x1B ';' 
  {60,    80,   4,   4,   6,    1,   -4 },   // 0x1C '<' 
  {61,    82,   4,   3,   6,    1,   -3 },   // 0x1D '=' 
  {62,    84,   4,   4,   6,    1,   -4 },   // 0x1E '>' 
  {63,    86,   4,   6,   6,    1,   -5 },   // 0x1F '?' 
  {64,    89,   6,   6,   6,    0,   -4 },   // 0x20 '@' 
  {65,    94,   6,   6,   6,    0,   -5 },   // 0x21 'A' 
  {66,    99,   5,   6,   6,    0,   -5 },   // 0x22 'B' 
  {67,   103,   4,   6,   6,    1,   -5 },   // 0x23 'C' 
  {68,   106,   5,   6,   6,    0,   -5 },   // 0x24 'D' 
  {69,   110,   5,   6,   6,    0,   -5 },   // 0x25 'E' 
  {70,   114,   5,   6,   6,    0,   -5 },   // 0x26 'F' 
  {71,   118,   5,   6,   6,    1,   -5 },   // 0x27 'G' 
  {72,   122,   6,   6,   6,    0,   -5 },   // 0x28 'H' 
  {73,   127,   5,   6,   6,    1,   -5 },   // 0x29 'I' 
  {74,   131,   5,   6,   6,    1,   -5 },   // 0x2A 'J' 
  {75,   135,   6,   6,   6,    0,   -5 },   // 0x2B 'K' 
  {76,   140,   5,   6,   6,    0,   -5 },   // 0x2C 'L' 
  {77,   144,   6,   6,   6,    0,   -5 },   // 0x2D 'M' 
  {78,   149,   6,   6,   6,    0,   -5 },   // 0x2E 'N' 
  {79,   154,   5,   6,   6,    0,   -5 },   // 0x2F 'O' 
  {80,   158,   5,   6,   6,    0,   -5 },   // 0x30 'P' 
  {81,   162,   5,   7,   6,    0,   -5 },   // 0x31 'Q' 
  {82,   167,   6,   6,   6,    0,   -5 },   // 0x32 'R' 
  {83,   172,   4,   6,   6,    1,   -5 },   // 0x33 'S' 
  {84,   175,   4,   6,   6,    1,   -5 },   // 0x34 'T' 
  {85,   178,   6,   6,   6,    0,   -5 },   // 0x35 'U' 
  {86,   183,   6,   6,   6,    0,   -5 },   // 0x36 'V' 
  {87,   188,   6,   6,   6,    0,   -5 },   // 0x37 'W' 
  {88,   193,   6,   6,   6,    0,   -5 },   // 0x38 'X' 
  {89,   198,   6,   6,   6,    0,   -5 },   // 0x39 'Y' 
  {90,   203,   4,   6,   6,    1,   -5 },   // 0x3A 'Z' 
  {91,   206,   3,   8,   6,    1,   -5 },   // 0x3B '[' 
  {92,   209,   4,   7,   6,    1,   -5 },   // 0x3C '\' 
  {93,   213,   3,   8,   6,    2,   -5 },   // 0x3D ']' 
  {94,   216,   4,   3,   6,    1,   -5 },   // 0x3E '^' 
  {95,   218,   6,   1,   6,    0,    2 },   // 0x3F '_' 
  {96,   219,   3,   2,   6,    1,   -6 },   // 0x40 '`' 
  {97,   220,   5,   5,   6,    1,   -4 },   // 0x41 'a' 
  {98,   224,   5,   6,   6,    0,   -5 },   // 0x42 'b' 
  {99,   228,   4,   5,   6,    1,   -4 },   // 0x43 'c' 
  {100,   231,   5,   6,   6,    1,   -5 },   // 0x44 'd' 
  {101,   235,   5,   5,   6,    1,   -4 },   // 0x45 'e' 
  {102,   239,   5,   6,   6,    1,   -5 },   // 0x46 'f' 
  {103,   243,   5,   7,   6,    1,   -4 },   // 0x47 'g' 
  {104,   248,   6,   6,   6,    0,   -5 },   // 0x48 'h' 
  {105,   253,   5,   7,   6,    0,   -6 },   // 0x49 'i' 
  {106,   258,   4,   9,   6,    0,   -6 },   // 0x4A 'j' 
  {107,   263,   6,   6,   6,    0,   -5 },   // 0x4B 'k' 
  {108,   268,   5,   6,   6,    0,   -5 },   // 0x4C 'l' 
  {109,   272,   7,   5,   6,    0,   -4 },   // 0x4D 'm' 
  {110,   277,   6,   5,   6,    0,   -4 },   // 0x4E 'n' 
  {111,   281,   4,   5,   6,    1,   -4 },   // 0x4F 'o' 
  {112,   284,   5,   7,   6,    0,   -4 },   // 0x50 'p' 
  {113,   289,   5,   7,   6,    1,   -4 },   // 0x51 'q' 
  {114,   294,   5,   5,   6,    1,   -4 },   // 0x52 'r' 
  {115,   298,   4,   5,   6,    1,   -4 },   // 0x53 's' 
  {116,   301,   5,   6,   6,    1,   -5 },   // 0x54 't' 
  {117,   305,   6,   5,   6,    0,   -4 },   // 0x55 'u' 
  {118,   309,   6,   5,   6,    0,   -4 },   // 0x56 'v' 
  {119,   313,   6,   5,   6,    0,   -4 },   // 0x57 'w' 
  {120,   317,   6,   5,   6,    0,   -4 },   // 0x58 'x' 
  {121,   321,   6,   7,   6,    0,   -4 },   // 0x59 'y' 
  {122,   327,   4,   5,   6,    1,   -4 },   // 0x5A 'z' 
  {123,   330,   3,   8,   6,    1,   -5 },   // 0x5B '{' 
  {124,   333,   1,   8,   6,    2,   -5 },   // 0x5C '|' 
  {125,   334,   3,   8,   6,    2,   -5 },   // 0x5D '}' 
  {126,   337,   4,   1,   6,    1,   -2 }   // 0x5E '~' 
};

const gfxfont_t HotStuff5 PROGMEM = 
{
  (uint8_t  *)HotStuff5Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff5Glyphs, //< Glyph array
  95,// total glyphs in the string
   1,  // newline distance (y axis)
     0,  // minimum X - left most
    -2,  // minimum Y - bottom most (descenders can drive this negative)
     7,  // maximum X - right most
     7}; // maximum Y - top most
// Approx. 1017 bytes -  but your mileage may vary.

#endif