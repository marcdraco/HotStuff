
#ifndef __FIXEDFONTNOVAMONOTTF9
#define __FIXEDFONTNOVAMONOTTF9
const uint8_t HotStuff9Bitmaps[] PROGMEM = {
  0x00, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81,
  0x81, 0x81, 0x81, 0xF8, 0x86, 0x82, 0x82, 0x86, 0xFE, 0x82, 0x81, 0x81,
  0x81, 0x81, 0x82, 0xFC, 0x3C, 0x42, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x81, 0x81, 0x42, 0x3C, 0xFC, 0x82, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x81, 0x81, 0x81, 0x81, 0x82, 0xFC, 0xFD, 0x02, 0x04, 0x08, 0x10,
  0x3F, 0x40, 0x81, 0x02, 0x04, 0x0F, 0xE0, 0xFE, 0x08, 0x20, 0x82, 0x0F,
  0xE0, 0x82, 0x08, 0x20, 0x80, 0x3C, 0x42, 0x81, 0x81, 0x80, 0x80, 0x8F,
  0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x81, 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFE, 0x20, 0x40,
  0x81, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x8F, 0xE0, 0x7F, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x81, 0x42, 0x3C, 0x83, 0x82,
  0x86, 0x8C, 0x98, 0x98, 0xB0, 0xFC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x81, 0x02, 0x04, 0x08, 0x1F,
  0xC0, 0x7E, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91,
  0x91, 0x91, 0x91, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x81, 0x81, 0x81, 0x81, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0xFC, 0x82, 0x81, 0x81, 0x81,
  0x81, 0x82, 0xFC, 0x80, 0x80, 0x80, 0x80, 0x80, 0x38, 0x44, 0x82, 0x82,
  0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x9A, 0x4C, 0x3E, 0x03, 0xFC,
  0x82, 0x81, 0x81, 0x81, 0x81, 0x82, 0xFC, 0x8C, 0x86, 0x86, 0x83, 0x83,
  0x79, 0x9A, 0x14, 0x28, 0x0E, 0x1F, 0x02, 0x02, 0x06, 0x0C, 0x14, 0x47,
  0x00, 0xFF, 0x84, 0x02, 0x01, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04,
  0x02, 0x01, 0x00, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x80, 0x70, 0x34, 0x09, 0x02, 0x61,
  0x88, 0x42, 0x10, 0xCC, 0x33, 0x04, 0x81, 0xE0, 0x78, 0x0C, 0x03, 0x00,
  0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91,
  0x91, 0x7E, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x3C, 0x3C,
  0x66, 0x66, 0xC3, 0xC3, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x46, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x7F, 0x02, 0x06, 0x04, 0x0C, 0x08,
  0x18, 0x10, 0x30, 0x20, 0x60, 0x40, 0xFF, 0x7B, 0x38, 0x61, 0x1D, 0xDC,
  0x61, 0x85, 0xD0, 0x82, 0x08, 0x20, 0xFB, 0x38, 0x61, 0x86, 0x18, 0x61,
  0xCD, 0xE0, 0x7B, 0x38, 0x61, 0x82, 0x08, 0x61, 0xCD, 0xE0, 0x04, 0x10,
  0x41, 0x7F, 0x38, 0x61, 0x86, 0x18, 0x61, 0xCD, 0xE0, 0x7B, 0x28, 0x63,
  0xBF, 0x88, 0x61, 0xCD, 0xE0, 0x1C, 0x49, 0x0A, 0x14, 0x08, 0x10, 0x7E,
  0x40, 0x81, 0x02, 0x04, 0x08, 0x00, 0x7B, 0x38, 0x61, 0x86, 0x18, 0x61,
  0xCD, 0xF0, 0x61, 0xCD, 0xE0, 0x82, 0x08, 0x20, 0xFB, 0x38, 0x61, 0x86,
  0x18, 0x61, 0x86, 0x10, 0xC1, 0x80, 0x00, 0x04, 0x08, 0x10, 0x20, 0x40,
  0x81, 0x02, 0x16, 0x67, 0x80, 0x0C, 0x30, 0x00, 0x04, 0x10, 0x41, 0x04,
  0x10, 0x61, 0x86, 0x18, 0x61, 0xC9, 0xC0, 0x82, 0x08, 0x20, 0x8E, 0x6B,
  0x3C, 0xFA, 0x18, 0x61, 0x86, 0x10, 0x82, 0x08, 0x20, 0x82, 0x08, 0x20,
  0x82, 0x08, 0x21, 0xCD, 0xE0, 0x7E, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91,
  0x91, 0x91, 0x91, 0x7B, 0x38, 0x61, 0x86, 0x18, 0x61, 0x86, 0x10, 0x7B,
  0x38, 0x61, 0x86, 0x18, 0x61, 0xCD, 0xE0, 0x7B, 0x38, 0x61, 0x86, 0x18,
  0x61, 0xCF, 0xE8, 0x20, 0x82, 0x00, 0x78, 0xCC, 0x84, 0x84, 0x84, 0x84,
  0x84, 0x84, 0xCC, 0x7C, 0x04, 0x07, 0x07, 0x04, 0x7B, 0x38, 0x60, 0x82,
  0x08, 0x20, 0x82, 0x00, 0x39, 0x24, 0x18, 0x38, 0x38, 0x61, 0x4D, 0xE0,
  0x40, 0x81, 0x02, 0x0F, 0xC8, 0x10, 0x20, 0x40, 0x81, 0x0A, 0x12, 0x67,
  0x80, 0x86, 0x18, 0x61, 0x86, 0x18, 0x61, 0xCD, 0xE0, 0x81, 0xC3, 0x42,
  0x66, 0x24, 0x24, 0x3C, 0x18, 0x18, 0x10, 0x91, 0x91, 0x91, 0x91, 0x91,
  0x91, 0x91, 0x91, 0x91, 0x7E, 0xC3, 0x42, 0x66, 0x3C, 0x18, 0x18, 0x3C,
  0x66, 0x42, 0xC3, 0x86, 0x18, 0x61, 0x86, 0x18, 0x61, 0xCD, 0xF0, 0x61,
  0xCD, 0xE0, 0x7E, 0x06, 0x0C, 0x08, 0x18, 0x10, 0x30, 0x60, 0x7E, 0x3C,
  0x46, 0x83, 0x87, 0x85, 0x8D, 0x89, 0x99, 0x91, 0xB1, 0xA1, 0xE1, 0x62,
  0x3C, 0x05, 0xFA, 0x49, 0x24, 0x92, 0x40, 0x3C, 0x42, 0x81, 0x81, 0x01,
  0x01, 0x07, 0x0E, 0x18, 0x30, 0x20, 0x60, 0x40, 0xFF, 0xFE, 0x06, 0x0C,
  0x08, 0x18, 0x3C, 0x06, 0x03, 0x01, 0x81, 0x81, 0x42, 0x3C, 0x02, 0x02,
  0x06, 0x0E, 0x0A, 0x1A, 0x32, 0x32, 0x62, 0x62, 0xFF, 0x02, 0x02, 0x02,
  0x3E, 0x20, 0x60, 0x60, 0x60, 0x7C, 0x42, 0x01, 0x01, 0x81, 0x81, 0x42,
  0x3C, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x80, 0xFC, 0xC2, 0x81, 0x81, 0x81,
  0x81, 0x42, 0x3C, 0xFF, 0x02, 0x06, 0x04, 0x0C, 0x08, 0x18, 0x10, 0x30,
  0x20, 0x60, 0x40, 0xC0, 0x3C, 0x42, 0x81, 0x81, 0xC3, 0xFF, 0x7E, 0xE7,
  0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x81,
  0x43, 0x3F, 0x01, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x7F, 0x70, 0x44, 0x22,
  0x11, 0x17, 0x38, 0x30, 0x30, 0x30, 0x30, 0x71, 0xA1, 0x20, 0x90, 0x48,
  0x18, 0xF0, 0xFF, 0x80, 0x55, 0x55, 0x54, 0xF0, 0xF0, 0x3C, 0xF8, 0x88,
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0xF0, 0xF1, 0x11, 0x11, 0x11,
  0x11, 0x11, 0x11, 0x11, 0x11, 0xF0, 0x11, 0x88, 0xC6, 0x63, 0x18, 0xC6,
  0x31, 0x8C, 0x61, 0x8C, 0x21, 0x84, 0x43, 0x08, 0x63, 0x0C, 0x63, 0x18,
  0xC6, 0x31, 0x8C, 0xC6, 0x23, 0x10 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff9Glyphs[] PROGMEM = {
  {32,     0,   1,   1,  10,    0,    0 },   // 0x00 ' ' 
  {65,     1,   8,  14,  10,    1,  -13 },   // 0x01 'A' 
  {66,    15,   8,  13,  10,    1,  -12 },   // 0x02 'B' 
  {67,    28,   8,  14,  10,    1,  -13 },   // 0x03 'C' 
  {68,    42,   8,  13,  10,    1,  -12 },   // 0x04 'D' 
  {69,    55,   7,  13,  10,    2,  -12 },   // 0x05 'E' 
  {70,    67,   6,  13,  10,    2,  -12 },   // 0x06 'F' 
  {71,    77,   8,  14,  10,    1,  -13 },   // 0x07 'G' 
  {72,    91,   8,  14,  10,    1,  -13 },   // 0x08 'H' 
  {73,   105,   7,  13,  10,    1,  -12 },   // 0x09 'I' 
  {74,   117,   8,  13,  10,    1,  -12 },   // 0x0A 'J' 
  {75,   130,   8,  14,  10,    1,  -13 },   // 0x0B 'K' 
  {76,   144,   7,  14,  10,    1,  -13 },   // 0x0C 'L' 
  {77,   157,   8,  14,  10,    1,  -13 },   // 0x0D 'M' 
  {78,   171,   8,  14,  10,    1,  -13 },   // 0x0E 'N' 
  {79,   185,   8,  14,  10,    1,  -13 },   // 0x0F 'O' 
  {80,   199,   8,  13,  10,    1,  -12 },   // 0x10 'P' 
  {81,   212,   8,  15,  10,    1,  -13 },   // 0x11 'Q' 
  {82,   227,   8,  13,  10,    1,  -12 },   // 0x12 'R' 
  {83,   240,   7,  14,  10,    2,  -13 },   // 0x13 'S' 
  {84,   253,   9,  13,  10,    0,  -12 },   // 0x14 'T' 
  {85,   268,   8,  14,  10,    1,  -13 },   // 0x15 'U' 
  {86,   282,  10,  14,  10,    0,  -13 },   // 0x16 'V' 
  {87,   300,   8,  14,  10,    1,  -13 },   // 0x17 'W' 
  {88,   314,   8,  14,  10,    1,  -13 },   // 0x18 'X' 
  {89,   328,   8,  14,  10,    1,  -13 },   // 0x19 'Y' 
  {90,   342,   8,  13,  10,    1,  -12 },   // 0x1A 'Z' 
  {97,   355,   6,  10,  10,    2,   -9 },   // 0x1B 'a' 
  {98,   363,   6,  14,  10,    2,  -13 },   // 0x1C 'b' 
  {99,   374,   6,  10,  10,    2,   -9 },   // 0x1D 'c' 
  {100,   382,   6,  14,  10,    2,  -13 },   // 0x1E 'd' 
  {101,   393,   6,  10,  10,    2,   -9 },   // 0x1F 'e' 
  {102,   401,   7,  14,  10,    1,  -13 },   // 0x20 'f' 
  {103,   414,   6,  14,  10,    2,   -9 },   // 0x21 'g' 
  {104,   425,   6,  14,  10,    2,  -13 },   // 0x22 'h' 
  {105,   436,   7,  14,  10,    1,  -13 },   // 0x23 'i' 
  {106,   449,   6,  18,  10,    2,  -13 },   // 0x24 'j' 
  {107,   463,   6,  14,  10,    2,  -13 },   // 0x25 'k' 
  {108,   474,   6,  14,  10,    2,  -13 },   // 0x26 'l' 
  {109,   485,   8,  10,  10,    1,   -9 },   // 0x27 'm' 
  {110,   495,   6,  10,  10,    2,   -9 },   // 0x28 'n' 
  {111,   503,   6,  10,  10,    2,   -9 },   // 0x29 'o' 
  {112,   511,   6,  14,  10,    2,   -9 },   // 0x2A 'p' 
  {113,   522,   8,  14,  10,    2,   -9 },   // 0x2B 'q' 
  {114,   536,   6,  10,  10,    2,   -9 },   // 0x2C 'r' 
  {115,   544,   6,  10,  10,    2,   -9 },   // 0x2D 's' 
  {116,   552,   7,  14,  10,    1,  -13 },   // 0x2E 't' 
  {117,   565,   6,  10,  10,    2,   -9 },   // 0x2F 'u' 
  {118,   573,   8,  10,  10,    1,   -9 },   // 0x30 'v' 
  {119,   583,   8,  10,  10,    1,   -9 },   // 0x31 'w' 
  {120,   593,   8,  10,  10,    1,   -9 },   // 0x32 'x' 
  {121,   603,   6,  14,  10,    2,   -9 },   // 0x33 'y' 
  {122,   614,   8,   9,  10,    1,   -8 },   // 0x34 'z' 
  {48,   623,   8,  14,  10,    1,  -13 },   // 0x35 '0' 
  {49,   637,   3,  14,  10,    2,  -13 },   // 0x36 '1' 
  {50,   643,   8,  14,  10,    1,  -13 },   // 0x37 '2' 
  {51,   657,   8,  13,  10,    1,  -12 },   // 0x38 '3' 
  {52,   670,   8,  14,  10,    1,  -13 },   // 0x39 '4' 
  {53,   684,   8,  13,  10,    1,  -12 },   // 0x3A '5' 
  {54,   697,   8,  14,  10,    1,  -13 },   // 0x3B '6' 
  {55,   711,   8,  13,  10,    1,  -12 },   // 0x3C '7' 
  {56,   724,   8,  14,  10,    1,  -13 },   // 0x3D '8' 
  {57,   738,   8,  14,  10,    1,  -13 },   // 0x3E '9' 
  {45,   752,   8,   1,  10,    1,   -6 },   // 0x3F '-' 
  {37,   753,   9,  14,  10,    0,  -13 },   // 0x40 '%' 
  {46,   769,   2,   2,  10,    4,   -1 },   // 0x41 '.' 
  {44,   770,   2,   5,  10,    4,   -2 },   // 0x42 ',' 
  {33,   772,   2,  14,  10,    4,  -13 },   // 0x43 '!' 
  {58,   776,   2,   7,  10,    4,   -6 },   // 0x44 ':' 
  {91,   778,   4,  19,  10,    4,  -15 },   // 0x45 '[' 
  {93,   788,   4,  19,  10,    2,  -15 },   // 0x46 ']' 
  {40,   798,   5,  19,  10,    4,  -15 },   // 0x47 '(' 
  {41,   810,   5,  19,  10,    2,  -15 }   // 0x48 ')' 
};

const gfxfont_t HotStuff9 PROGMEM = 
{
  (uint8_t  *)HotStuff9Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff9Glyphs, //< Glyph array
  73,// total glyphs in the string
  19,  // newline distance (y axis)
     0,  // minimum X - left most
    -4,  // minimum Y - bottom most (descenders can drive this negative)
    10,  // maximum X - right most
    16}; // maximum Y - top most
// Approx. 1347 bytes -  but your mileage may vary.

#endif