
#ifndef __FIXEDFONTMONOIDAAAALADAATTF18
#define __FIXEDFONTMONOIDAAAALADAATTF18
const uint8_t HotStuff18Bitmaps[] PROGMEM = {
  0x0F, 0x00, 0xFE, 0x0F, 0xF8, 0xE1, 0xC6, 0x07, 0x70, 0x1B, 0x80, 0xDC,
  0x06, 0xC0, 0x36, 0x01, 0xF0, 0x0F, 0x80, 0x7C, 0x03, 0xE3, 0x9F, 0x1C,
  0xF8, 0xE7, 0xC0, 0x3E, 0x01, 0xF0, 0x0F, 0x80, 0x6E, 0x03, 0x70, 0x1B,
  0x80, 0xCC, 0x0E, 0x70, 0x73, 0xC7, 0x0F, 0xF0, 0x3F, 0x00, 0x07, 0x00,
  0x78, 0x07, 0xC0, 0xFE, 0x0F, 0x70, 0x63, 0x82, 0x1C, 0x00, 0xE0, 0x07,
  0x00, 0x38, 0x01, 0xC0, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x1C, 0x00, 0xE0,
  0x07, 0x00, 0x38, 0x01, 0xC0, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x1C, 0x00,
  0xE0, 0x07, 0x00, 0x38, 0x3F, 0xFF, 0xFF, 0xF0, 0x0F, 0x07, 0xFE, 0x3F,
  0xF9, 0x00, 0xE0, 0x03, 0x00, 0x1C, 0x00, 0xE0, 0x07, 0x00, 0x30, 0x03,
  0x80, 0x1C, 0x01, 0xC0, 0x0E, 0x00, 0xE0, 0x06, 0x00, 0x70, 0x07, 0x00,
  0x38, 0x03, 0x80, 0x1C, 0x01, 0xC0, 0x0E, 0x00, 0xE0, 0x06, 0x00, 0x70,
  0x07, 0x00, 0x3F, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00,
  0xE0, 0x0E, 0x00, 0x70, 0x07, 0x00, 0x70, 0x03, 0x80, 0x38, 0x01, 0x80,
  0x1F, 0x80, 0x7E, 0x00, 0x38, 0x00, 0xE0, 0x07, 0x00, 0x38, 0x00, 0xC0,
  0x06, 0x00, 0x30, 0x01, 0x80, 0x0C, 0x00, 0xE0, 0x07, 0x00, 0x36, 0x07,
  0xBF, 0xF8, 0xFF, 0x80, 0x18, 0x38, 0x30, 0x70, 0xE0, 0xE1, 0xC1, 0xC3,
  0x83, 0x86, 0x07, 0x0C, 0x0E, 0x18, 0x1C, 0x70, 0x38, 0xE0, 0x71, 0xC0,
  0xE3, 0x81, 0xC6, 0x03, 0x8C, 0x07, 0x18, 0x0E, 0x70, 0x1C, 0xE0, 0x39,
  0xC0, 0x73, 0xFF, 0xFF, 0xFF, 0xF0, 0x03, 0x80, 0x07, 0x00, 0x0E, 0x00,
  0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x01, 0xC0, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xC0, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x1C, 0x00, 0xE0, 0x07,
  0x00, 0x39, 0xE1, 0xDF, 0xCF, 0xFF, 0x70, 0x38, 0x00, 0xE0, 0x07, 0x00,
  0x38, 0x00, 0xC0, 0x06, 0x00, 0x30, 0x01, 0x80, 0x0C, 0x00, 0xE0, 0x07,
  0x00, 0x36, 0x07, 0xBF, 0xF8, 0xFF, 0x80, 0x07, 0xC0, 0xFE, 0x0F, 0xF0,
  0xE0, 0x06, 0x00, 0x70, 0x03, 0x80, 0x1C, 0x00, 0xE0, 0x07, 0x00, 0x39,
  0xE1, 0xDF, 0xCF, 0xFF, 0x78, 0x3B, 0x80, 0xFC, 0x07, 0xE0, 0x3F, 0x00,
  0xF8, 0x07, 0xC0, 0x3E, 0x01, 0xF0, 0x0F, 0x80, 0xFC, 0x07, 0x60, 0x33,
  0xC3, 0x8F, 0xF8, 0x3F, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x07,
  0x00, 0x18, 0x00, 0x60, 0x03, 0x80, 0x0C, 0x00, 0x30, 0x01, 0xC0, 0x06,
  0x00, 0x18, 0x00, 0xE0, 0x03, 0x00, 0x0C, 0x00, 0x70, 0x01, 0x80, 0x06,
  0x00, 0x38, 0x00, 0xC0, 0x03, 0x00, 0x1C, 0x00, 0x60, 0x01, 0x80, 0x0E,
  0x00, 0x30, 0x00, 0xC0, 0x07, 0x00, 0x07, 0x80, 0x7F, 0x83, 0xFF, 0x0E,
  0x0E, 0x70, 0x19, 0xC0, 0x66, 0x01, 0xD8, 0x07, 0x60, 0x1D, 0x80, 0x77,
  0x01, 0x8C, 0x0E, 0x38, 0x70, 0x7F, 0x81, 0xFE, 0x0F, 0x3C, 0x70, 0x39,
  0xC0, 0x76, 0x01, 0xF8, 0x03, 0xE0, 0x0F, 0x80, 0x36, 0x01, 0xD8, 0x07,
  0x70, 0x18, 0xE1, 0xE3, 0xFF, 0x03, 0xF8, 0x07, 0x80, 0x7F, 0x83, 0xFF,
  0x1C, 0x0E, 0x70, 0x39, 0x80, 0x6E, 0x01, 0xB8, 0x06, 0xE0, 0x1B, 0x80,
  0x7E, 0x01, 0xF8, 0x07, 0x60, 0x1D, 0x80, 0xF7, 0x03, 0xDE, 0x1F, 0x3F,
  0xDC, 0x7E, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x18, 0x00, 0x60, 0x01, 0x80,
  0x0E, 0x00, 0x39, 0x81, 0xC7, 0xFE, 0x1F, 0xF0, 0x00, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00,
  0xE0, 0x01, 0xC0, 0x03, 0x80, 0x07, 0x00, 0x0E, 0x00, 0x1F, 0xFF, 0x3F,
  0xFE, 0x70, 0x00, 0xE0, 0x01, 0xC0, 0x03, 0x80, 0x07, 0x00, 0x0E, 0x00,
  0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x01, 0xC0, 0x03, 0x80, 0x07,
  0x00, 0x00, 0x00, 0xFC, 0x01, 0xFF, 0xE0, 0xFF, 0xF8, 0x78, 0x00, 0x38,
  0x00, 0x0C, 0x00, 0x07, 0x00, 0x01, 0x80, 0x00, 0x60, 0x00, 0x38, 0x00,
  0x0E, 0x00, 0x03, 0x80, 0x00, 0xE0, 0x00, 0x38, 0x00, 0x0E, 0x00, 0x03,
  0x80, 0x00, 0xE0, 0x00, 0x38, 0x00, 0x0E, 0x00, 0x03, 0x80, 0x00, 0x60,
  0x00, 0x1C, 0x00, 0x07, 0x00, 0x00, 0xE0, 0x00, 0x3C, 0x00, 0x07, 0xC0,
  0x70, 0xFF, 0xFC, 0x0F, 0xFC, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x01, 0xC0,
  0x00, 0x70, 0x00, 0x38, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x01, 0xC0, 0x00,
  0xE0, 0x00, 0x38, 0x00, 0x0C, 0x00, 0x07, 0x00, 0x01, 0x80, 0x00, 0xE0,
  0x00, 0x30, 0x00, 0x1C, 0x00, 0x06, 0x00, 0x03, 0x80, 0x00, 0xE0, 0x00,
  0x70, 0x00, 0x1C, 0x00, 0x0E, 0x00, 0x03, 0x80, 0x01, 0xC0, 0x00, 0x70,
  0x00, 0x38, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x01, 0xC0, 0x00, 0x60, 0x00,
  0x38, 0x00, 0x0C, 0x00, 0x07, 0x00, 0x01, 0x80, 0x00, 0xE0, 0x00, 0x00,
  0x0E, 0x00, 0x0F, 0xE0, 0x07, 0xFC, 0x01, 0x83, 0x00, 0xE0, 0xE0, 0x38,
  0x38, 0x0E, 0x0E, 0x05, 0x83, 0x03, 0x7F, 0xC1, 0xCF, 0xE1, 0xE0, 0xE0,
  0xF0, 0x00, 0x78, 0x00, 0x38, 0x00, 0x3C, 0x00, 0x1E, 0x00, 0x0F, 0x00,
  0x0F, 0x00, 0x07, 0x80, 0x03, 0xC3, 0xF1, 0xC1, 0xFE, 0xE0, 0xE1, 0xF0,
  0x30, 0x78, 0x0C, 0x0C, 0x03, 0x03, 0x00, 0xC1, 0xC0, 0x38, 0x70, 0x07,
  0xF8, 0x00, 0xFC, 0x7B, 0xFF, 0xFF, 0x78 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff18Glyphs[] PROGMEM = {
  {48,     0,  13,  28,  20,    5,  -27 },   // 0x00 '0' 
  {49,    46,  13,  28,  20,    5,  -27 },   // 0x01 '1' 
  {50,    92,  13,  28,  20,    5,  -27 },   // 0x02 '2' 
  {51,   138,  13,  28,  20,    5,  -27 },   // 0x03 '3' 
  {52,   184,  15,  28,  20,    5,  -27 },   // 0x04 '4' 
  {53,   237,  13,  28,  20,    5,  -27 },   // 0x05 '5' 
  {54,   283,  13,  28,  20,    5,  -27 },   // 0x06 '6' 
  {55,   329,  14,  28,  20,    4,  -27 },   // 0x07 '7' 
  {56,   378,  14,  28,  20,    4,  -27 },   // 0x08 '8' 
  {57,   427,  14,  28,  20,    4,  -27 },   // 0x09 '9' 
  {32,   476,   1,   1,  20,    0,    0 },   // 0x0A ' ' 
  {70,   477,  15,  28,  20,    5,  -27 },   // 0x0B 'F' 
  {67,   530,  18,  28,  20,    2,  -27 },   // 0x0C 'C' 
  {45,   593,  13,   2,  20,    5,  -14 },   // 0x0D '-' 
  {47,   597,  18,  33,  20,    2,  -29 },   // 0x0E '/' 
  {37,   672,  18,  28,  20,    2,  -27 },   // 0x0F '%' 
  {46,   735,   6,   5,  20,    7,   -4 }   // 0x10 '.' 
};

const gfxfont_t HotStuff18 PROGMEM = 
{
  (uint8_t  *)HotStuff18Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff18Glyphs, //< Glyph array
  17,// total glyphs in the string
  28,  // newline distance (y axis)
     0,  // minimum X - left most
    -3,  // minimum Y - bottom most (descenders can drive this negative)
    20,  // maximum X - right most
    30}; // maximum Y - top most
// Approx. 872 bytes -  but your mileage may vary.

#endif