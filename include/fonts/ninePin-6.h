
#ifndef __FIXEDFONTNINEPINTTF6
#define __FIXEDFONTNINEPINTTF6
const uint8_t HotStuff6Bitmaps[] PROGMEM = {
  0x00, 0xB6, 0x40, 0x99, 0x24, 0x00, 0x95, 0xB0, 0x04, 0xAD, 0x92, 0x00,
  0x48, 0x10, 0x00, 0xDC, 0x00, 0x06, 0x80, 0xDA, 0x00, 0x20, 0x02, 0x02,
  0x8D, 0x20, 0x02, 0x09, 0xC3, 0x01, 0x00, 0x10, 0x00, 0x90, 0x80, 0x06,
  0x21, 0x41, 0x00, 0x68, 0xA4, 0x40, 0x14, 0x02, 0x20, 0x02, 0x08, 0x08,
  0x00, 0x50, 0xA0, 0x01, 0x01, 0x00, 0x10, 0x44, 0x02, 0x80, 0x92, 0x00,
  0xD5, 0xB0, 0x06, 0xA4, 0x80, 0x10, 0x00, 0x45, 0xB0, 0x02, 0x04, 0x00,
  0xA0, 0xC0, 0xB4, 0x80, 0x02, 0x00, 0x08, 0x20, 0x02, 0x08, 0x40, 0x01,
  0x00, 0x34, 0x02, 0x0C, 0x30, 0x12, 0x68, 0xC1, 0x00, 0x68, 0x20, 0x28,
  0x40, 0x10, 0x84, 0x05, 0x40, 0x34, 0x02, 0x0C, 0x10, 0x00, 0x84, 0x10,
  0x01, 0x6C, 0x34, 0x02, 0x08, 0x10, 0x06, 0x80, 0xC1, 0x00, 0x68, 0x82,
  0x02, 0x0C, 0x10, 0x16, 0xC0, 0x81, 0x00, 0x04, 0xB6, 0x02, 0x04, 0x00,
  0x16, 0x80, 0x81, 0x01, 0x68, 0x34, 0x02, 0x0C, 0x00, 0x16, 0xA0, 0xC1,
  0x00, 0x68, 0xB6, 0x00, 0x08, 0x10, 0x00, 0x81, 0x08, 0x00, 0x20, 0x34,
  0x02, 0x0C, 0x10, 0x06, 0xA0, 0xC1, 0x00, 0x68, 0x34, 0x02, 0x0C, 0x10,
  0x06, 0xC0, 0xC1, 0x00, 0x68, 0x88, 0x20, 0x02, 0x20, 0x06, 0x00, 0x41,
  0x00, 0x10, 0x08, 0x08, 0x00, 0x0C, 0xB6, 0x00, 0x05, 0xB0, 0xA0, 0x00,
  0x40, 0x20, 0x00, 0x41, 0x08, 0x01, 0x40, 0x34, 0x02, 0x0C, 0x10, 0x00,
  0x84, 0x00, 0x00, 0x20, 0x34, 0x02, 0x0C, 0x10, 0x12, 0x65, 0x40, 0x00,
  0x6C, 0x10, 0x00, 0xD4, 0x10, 0x16, 0xE0, 0xC1, 0x01, 0x04, 0xB4, 0x02,
  0x0C, 0x10, 0x16, 0xA0, 0xC1, 0x01, 0x68, 0x34, 0x02, 0x0C, 0x00, 0x10,
  0x20, 0x41, 0x00, 0x68, 0xB4, 0x02, 0x0C, 0x10, 0x10, 0x60, 0xC1, 0x01,
  0x68, 0xB6, 0x02, 0x04, 0x00, 0x16, 0xA0, 0x40, 0x01, 0x6C, 0xB6, 0x02,
  0x04, 0x00, 0x16, 0xA0, 0x40, 0x01, 0x00, 0x34, 0x02, 0x0C, 0x00, 0x12,
  0xE0, 0xC1, 0x00, 0x68, 0x82, 0x02, 0x0C, 0x10, 0x16, 0xE0, 0xC1, 0x01,
  0x04, 0xA8, 0x08, 0x40, 0x10, 0x84, 0x05, 0x40, 0x16, 0x00, 0x10, 0x20,
  0x00, 0xA1, 0x42, 0x00, 0x60, 0x82, 0x02, 0x14, 0x80, 0x14, 0x24, 0x42,
  0x01, 0x04, 0x80, 0x02, 0x04, 0x00, 0x10, 0x20, 0x40, 0x01, 0x6C, 0x82,
  0x02, 0x9C, 0x90, 0x10, 0x60, 0xC1, 0x01, 0x04, 0x82, 0x02, 0x8D, 0x10,
  0x12, 0x61, 0xC3, 0x01, 0x04, 0x34, 0x02, 0x0C, 0x10, 0x10, 0x60, 0xC1,
  0x00, 0x68, 0xB4, 0x02, 0x0C, 0x10, 0x16, 0xA0, 0x40, 0x01, 0x00, 0x34,
  0x02, 0x0C, 0x10, 0x10, 0x60, 0xC2, 0x00, 0x64, 0xB4, 0x02, 0x0C, 0x10,
  0x16, 0xA0, 0xC1, 0x01, 0x04, 0x34, 0x02, 0x0C, 0x00, 0x06, 0x80, 0xC1,
  0x00, 0x68, 0xB6, 0x00, 0x40, 0x80, 0x02, 0x04, 0x08, 0x00, 0x20, 0x82,
  0x02, 0x0C, 0x10, 0x10, 0x60, 0xC1, 0x00, 0x68, 0x82, 0x02, 0x0C, 0x10,
  0x10, 0x60, 0x92, 0x00, 0x20, 0x82, 0x02, 0x0C, 0x10, 0x12, 0x69, 0xC1,
  0x01, 0x04, 0x82, 0x02, 0x09, 0x20, 0x02, 0x09, 0x41, 0x01, 0x04, 0x82,
  0x02, 0x09, 0x20, 0x02, 0x04, 0x08, 0x00, 0x20, 0xB6, 0x00, 0x08, 0x20,
  0x02, 0x08, 0x40, 0x01, 0x6C, 0xA8, 0x21, 0x00, 0x42, 0x10, 0x05, 0x40,
  0x80, 0x02, 0x01, 0x00, 0x02, 0x01, 0x01, 0x00, 0x04, 0xA8, 0x02, 0x10,
  0x04, 0x21, 0x05, 0x40, 0x20, 0x22, 0xB6, 0x80, 0x80, 0x34, 0x02, 0x0C,
  0x18, 0x60, 0x0C, 0x80, 0x80, 0x02, 0x04, 0xA0, 0x14, 0x60, 0xC1, 0x00,
  0x68, 0x34, 0x02, 0x0C, 0x08, 0x20, 0x0D, 0x00, 0x02, 0x00, 0x09, 0x90,
  0x10, 0xE0, 0xC1, 0x00, 0x68, 0x34, 0x02, 0x0D, 0xB8, 0x00, 0x0D, 0x00,
  0x14, 0x00, 0x89, 0x00, 0x16, 0x08, 0x10, 0x00, 0x40, 0x35, 0x04, 0x04,
  0x13, 0x60, 0x00, 0x9A, 0x80, 0x02, 0x04, 0xA0, 0x14, 0x60, 0xC1, 0x01,
  0x04, 0x97, 0x40, 0x04, 0x00, 0x01, 0x04, 0x00, 0x41, 0x02, 0x13, 0x00,
  0x80, 0x02, 0x0C, 0x20, 0x12, 0x2C, 0x42, 0x01, 0x04, 0xA0, 0x08, 0x40,
  0x10, 0x84, 0x05, 0x40, 0xA4, 0x02, 0x4C, 0x18, 0x20, 0x20, 0x80, 0xB4,
  0x02, 0x0C, 0x18, 0x20, 0x20, 0x80, 0x34, 0x02, 0x0C, 0x18, 0x20, 0x0D,
  0x00, 0xB5, 0x04, 0x04, 0x1B, 0x40, 0x20, 0x40, 0x37, 0x04, 0x04, 0x13,
  0x60, 0x00, 0x81, 0x94, 0x02, 0x8C, 0x08, 0x00, 0x20, 0x00, 0x34, 0x02,
  0x01, 0xA0, 0x20, 0x2D, 0x00, 0x20, 0x09, 0x50, 0x10, 0x84, 0x00, 0x40,
  0x82, 0x02, 0x0C, 0x18, 0x60, 0x0C, 0x80, 0x82, 0x02, 0x0C, 0x12, 0x40,
  0x04, 0x00, 0x82, 0x02, 0x0C, 0x19, 0x20, 0x09, 0x00, 0x82, 0x02, 0x09,
  0xA8, 0x20, 0x20, 0x80, 0x83, 0x04, 0x01, 0xA0, 0x40, 0x01, 0x08, 0xB6,
  0x00, 0x09, 0xA8, 0x00, 0x2D, 0x80, 0x14, 0x02, 0x08, 0x02, 0x02, 0x08,
  0x00, 0x50, 0xB7, 0x40, 0xA0, 0x01, 0x04, 0x00, 0x11, 0x04, 0x02, 0x80,
  0x24, 0x09, 0x00 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff6Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   8,    0,    0 },   // 0x00 ' ' 
  {33,     1,   1,  10,   7,    3,   -9 },   // 0x01 '!' 
  {34,     3,   4,   2,   7,    1,   -9 },   // 0x02 '"' 
  {35,     4,   7,  10,   8,    0,   -9 },   // 0x03 '#' 
  {36,    13,   7,  10,   8,    0,   -9 },   // 0x04 '$' 
  {37,    22,   7,  10,   8,    0,   -9 },   // 0x05 '%' 
  {38,    31,   7,  10,   8,    0,   -9 },   // 0x06 '&' 
  {39,    40,   3,   4,   7,    1,   -9 },   // 0x07 ''' 
  {40,    42,   6,  10,   8,    0,   -9 },   // 0x08 '(' 
  {41,    50,   6,  10,   8,    1,   -9 },   // 0x09 ')' 
  {42,    58,   7,   7,   8,    0,   -8 },   // 0x0A '*' 
  {43,    65,   7,   7,   8,    0,   -8 },   // 0x0B '+' 
  {44,    72,   3,   4,   7,    1,   -2 },   // 0x0C ',' 
  {45,    74,   6,   1,   8,    0,   -4 },   // 0x0D '-' 
  {46,    75,   1,   1,   7,    3,    0 },   // 0x0E '.' 
  {47,    76,   7,  10,   8,    0,   -9 },   // 0x0F '/' 
  {48,    85,   7,  10,   8,    0,   -9 },   // 0x10 '0' 
  {49,    94,   5,  10,   8,    1,   -9 },   // 0x11 '1' 
  {50,   101,   7,  10,   8,    0,   -9 },   // 0x12 '2' 
  {51,   110,   7,  10,   8,    0,   -9 },   // 0x13 '3' 
  {52,   119,   7,  10,   8,    0,   -9 },   // 0x14 '4' 
  {53,   128,   7,  10,   8,    0,   -9 },   // 0x15 '5' 
  {54,   137,   7,  10,   8,    0,   -9 },   // 0x16 '6' 
  {55,   146,   7,  10,   8,    0,   -9 },   // 0x17 '7' 
  {56,   155,   7,  10,   8,    0,   -9 },   // 0x18 '8' 
  {57,   164,   7,  10,   8,    0,   -9 },   // 0x19 '9' 
  {58,   173,   1,   5,   7,    1,   -6 },   // 0x1A ':' 
  {59,   174,   3,   7,   7,    1,   -6 },   // 0x1B ';' 
  {60,   177,   7,  10,   8,    0,   -9 },   // 0x1C '<' 
  {61,   186,   7,   4,   8,    0,   -6 },   // 0x1D '=' 
  {62,   190,   7,  10,   8,    0,   -9 },   // 0x1E '>' 
  {63,   199,   7,  10,   8,    0,   -9 },   // 0x1F '?' 
  {64,   208,   7,  10,   8,    0,   -9 },   // 0x20 '@' 
  {65,   217,   7,  10,   8,    0,   -9 },   // 0x21 'A' 
  {66,   226,   7,  10,   8,    0,   -9 },   // 0x22 'B' 
  {67,   235,   7,  10,   8,    0,   -9 },   // 0x23 'C' 
  {68,   244,   7,  10,   8,    0,   -9 },   // 0x24 'D' 
  {69,   253,   7,  10,   8,    0,   -9 },   // 0x25 'E' 
  {70,   262,   7,  10,   8,    0,   -9 },   // 0x26 'F' 
  {71,   271,   7,  10,   8,    0,   -9 },   // 0x27 'G' 
  {72,   280,   7,  10,   8,    0,   -9 },   // 0x28 'H' 
  {73,   289,   5,  10,   8,    1,   -9 },   // 0x29 'I' 
  {74,   296,   7,  10,   8,    0,   -9 },   // 0x2A 'J' 
  {75,   305,   7,  10,   8,    0,   -9 },   // 0x2B 'K' 
  {76,   314,   7,  10,   8,    0,   -9 },   // 0x2C 'L' 
  {77,   323,   7,  10,   8,    0,   -9 },   // 0x2D 'M' 
  {78,   332,   7,  10,   8,    0,   -9 },   // 0x2E 'N' 
  {79,   341,   7,  10,   8,    0,   -9 },   // 0x2F 'O' 
  {80,   350,   7,  10,   8,    0,   -9 },   // 0x30 'P' 
  {81,   359,   7,  10,   8,    0,   -9 },   // 0x31 'Q' 
  {82,   368,   7,  10,   8,    0,   -9 },   // 0x32 'R' 
  {83,   377,   7,  10,   8,    0,   -9 },   // 0x33 'S' 
  {84,   386,   7,  10,   8,    0,   -9 },   // 0x34 'T' 
  {85,   395,   7,  10,   8,    0,   -9 },   // 0x35 'U' 
  {86,   404,   7,  10,   8,    0,   -9 },   // 0x36 'V' 
  {87,   413,   7,  10,   8,    0,   -9 },   // 0x37 'W' 
  {88,   422,   7,  10,   8,    0,   -9 },   // 0x38 'X' 
  {89,   431,   7,  10,   8,    0,   -9 },   // 0x39 'Y' 
  {90,   440,   7,  10,   8,    0,   -9 },   // 0x3A 'Z' 
  {91,   449,   5,  10,   8,    1,   -9 },   // 0x3B '[' 
  {92,   456,   7,  10,   8,    0,   -9 },   // 0x3C '\' 
  {93,   465,   5,  10,   8,    1,   -9 },   // 0x3D ']' 
  {94,   472,   5,   3,   8,    1,   -9 },   // 0x3E '^' 
  {95,   474,   7,   1,   8,    0,    1 },   // 0x3F '_' 
  {96,   475,   3,   3,   8,    3,   -9 },   // 0x40 '`' 
  {97,   477,   7,   7,   8,    0,   -6 },   // 0x41 'a' 
  {98,   484,   7,  10,   8,    0,   -9 },   // 0x42 'b' 
  {99,   493,   7,   7,   8,    0,   -6 },   // 0x43 'c' 
  {100,   500,   7,  10,   8,    0,   -9 },   // 0x44 'd' 
  {101,   509,   7,   7,   8,    0,   -6 },   // 0x45 'e' 
  {102,   516,   7,  10,   8,    0,   -9 },   // 0x46 'f' 
  {103,   525,   7,   8,   8,    0,   -6 },   // 0x47 'g' 
  {104,   532,   7,  10,   8,    0,   -9 },   // 0x48 'h' 
  {105,   541,   1,  10,   7,    3,   -9 },   // 0x49 'i' 
  {106,   543,   6,  11,   8,    0,   -9 },   // 0x4A 'j' 
  {107,   552,   7,  10,   8,    0,   -9 },   // 0x4B 'k' 
  {108,   561,   5,  10,   8,    1,   -9 },   // 0x4C 'l' 
  {109,   568,   7,   7,   8,    0,   -6 },   // 0x4D 'm' 
  {110,   575,   7,   7,   8,    0,   -6 },   // 0x4E 'n' 
  {111,   582,   7,   7,   8,    0,   -6 },   // 0x4F 'o' 
  {112,   589,   7,   8,   8,    0,   -6 },   // 0x50 'p' 
  {113,   596,   7,   8,   8,    0,   -6 },   // 0x51 'q' 
  {114,   603,   7,   7,   8,    0,   -6 },   // 0x52 'r' 
  {115,   610,   7,   7,   8,    0,   -6 },   // 0x53 's' 
  {116,   617,   5,  10,   8,    1,   -9 },   // 0x54 't' 
  {117,   624,   7,   7,   8,    0,   -6 },   // 0x55 'u' 
  {118,   631,   7,   7,   8,    0,   -6 },   // 0x56 'v' 
  {119,   638,   7,   7,   8,    0,   -6 },   // 0x57 'w' 
  {120,   645,   7,   7,   8,    0,   -6 },   // 0x58 'x' 
  {121,   652,   7,   8,   8,    0,   -6 },   // 0x59 'y' 
  {122,   659,   7,   7,   8,    0,   -6 },   // 0x5A 'z' 
  {123,   666,   6,  10,   8,    0,   -9 },   // 0x5B '{' 
  {124,   674,   1,  10,   7,    3,   -9 },   // 0x5C '|' 
  {125,   676,   6,  10,   8,    1,   -9 },   // 0x5D '}' 
  {126,   684,   6,   3,   8,    0,   -9 }   // 0x5E '~' 
};

const gfxfont_t HotStuff6 PROGMEM = 
{
  (uint8_t  *)HotStuff6Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff6Glyphs, //< Glyph array
  95,// total glyphs in the string
   1,  // newline distance (y axis)
     0,  // minimum X - left most
    -1,  // minimum Y - bottom most (descenders can drive this negative)
     7,  // maximum X - right most
    10}; // maximum Y - top most
// Approx. 1366 bytes -  but your mileage may vary.

#endif