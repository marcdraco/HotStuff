
#ifndef __FIXEDFONTUBUNTUMONORTTF10
#define __FIXEDFONTUBUNTUMONORTTF10
const uint8_t HotStuff10Bitmaps[] PROGMEM = {
  0x00, 0xDB, 0x6D, 0xB0, 0x1F, 0xF0, 0xCF, 0x3C, 0xF3, 0xCC, 0x66, 0x66,
  0x66, 0xFF, 0xFF, 0x66, 0x66, 0x66, 0xFF, 0xFF, 0x66, 0x66, 0x18, 0x18,
  0x3E, 0x7E, 0xC0, 0xC0, 0xE0, 0x7C, 0x3E, 0x07, 0x03, 0x83, 0xFF, 0x7C,
  0x18, 0x18, 0x60, 0xC8, 0xA4, 0x92, 0x49, 0x43, 0x40, 0x2C, 0x29, 0x24,
  0x92, 0x51, 0x30, 0x60, 0x3C, 0x3F, 0x19, 0x8C, 0xC3, 0xC3, 0xD9, 0x7D,
  0x9E, 0xC6, 0x73, 0xBF, 0xCF, 0x30, 0xFF, 0xC0, 0x08, 0x73, 0x18, 0x63,
  0x0C, 0x30, 0xC3, 0x06, 0x18, 0x30, 0x70, 0x80, 0x43, 0x83, 0x06, 0x18,
  0x30, 0xC3, 0x0C, 0x31, 0x86, 0x33, 0x84, 0x00, 0x18, 0x18, 0xDB, 0xFF,
  0x18, 0x3C, 0x66, 0x10, 0x20, 0x40, 0x8F, 0xE2, 0x04, 0x08, 0x10, 0x77,
  0x73, 0x6C, 0xFF, 0xFF, 0x80, 0x01, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08,
  0x08, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x3C, 0x7E,
  0x66, 0xC3, 0xDB, 0xDB, 0xDB, 0xC3, 0xC3, 0x66, 0x7E, 0x3C, 0x0C, 0x1C,
  0x7C, 0xCC, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x7F, 0x7F, 0x7C, 0xFE,
  0x86, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0xFF, 0xFF, 0x7C, 0xFE,
  0x86, 0x06, 0x0E, 0x3C, 0x3E, 0x07, 0x03, 0x87, 0xFE, 0x7C, 0x06, 0x0E,
  0x1E, 0x36, 0x36, 0x66, 0xC6, 0xFF, 0xFF, 0x06, 0x06, 0x06, 0x7F, 0x7F,
  0x60, 0x60, 0x7C, 0x7E, 0x07, 0x03, 0x03, 0x87, 0xFE, 0x7C, 0x0E, 0x3E,
  0x70, 0x60, 0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x3C, 0xFF, 0xFF,
  0x03, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x30, 0x30, 0x3C, 0x7F,
  0xC3, 0xC3, 0xE6, 0x7C, 0x7E, 0xC7, 0xC3, 0xC3, 0xFE, 0x3C, 0x3C, 0x7E,
  0xE7, 0xC3, 0xC3, 0xC3, 0x7F, 0x3F, 0x06, 0x0E, 0x7C, 0x70, 0xFF, 0x80,
  0x3F, 0xE0, 0x77, 0x70, 0x00, 0x77, 0x73, 0x6C, 0x03, 0x1E, 0x70, 0xC0,
  0x70, 0x18, 0x06, 0x01, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x78, 0x0E, 0x03,
  0x0E, 0x18, 0x60, 0x80, 0x7D, 0xFE, 0x18, 0x30, 0xC3, 0x0C, 0x00, 0x00,
  0x70, 0xE1, 0xC0, 0x1C, 0x3E, 0x67, 0x63, 0xC3, 0xCF, 0xDF, 0xDB, 0xDB,
  0xDF, 0xCF, 0x60, 0x70, 0x3E, 0x1E, 0x1C, 0x1B, 0x0D, 0x86, 0xC3, 0x63,
  0x99, 0x8C, 0xC6, 0x7F, 0x7F, 0xB0, 0x78, 0x30, 0xF8, 0xFE, 0xC6, 0xC6,
  0xC6, 0xF8, 0xFE, 0xC3, 0xC3, 0xC7, 0xFE, 0xFC, 0x1E, 0x3F, 0x71, 0xE0,
  0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0x61, 0x7F, 0x1E, 0xF8, 0xFE, 0xC6, 0xC3,
  0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC6, 0xFE, 0xF8, 0xFF, 0xFF, 0x06, 0x0C,
  0x1F, 0xBF, 0x60, 0xC1, 0x83, 0xFF, 0xF0, 0xFF, 0xFF, 0x06, 0x0C, 0x1F,
  0xBF, 0x60, 0xC1, 0x83, 0x06, 0x00, 0x1E, 0x3F, 0x71, 0xE0, 0xC0, 0xC0,
  0xC3, 0xC3, 0xE3, 0x63, 0x7F, 0x1F, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF,
  0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xF3, 0x0C, 0x30, 0xC3, 0x0C,
  0x30, 0xCF, 0xFF, 0x7E, 0xFC, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x07, 0x1F,
  0xF3, 0xC0, 0xC3, 0xC6, 0xCC, 0xDC, 0xD8, 0xF0, 0xF8, 0xD8, 0xCC, 0xC6,
  0xC6, 0xC3, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0xFF,
  0xF0, 0x66, 0x66, 0x66, 0x5B, 0xDB, 0xDB, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3,
  0xC3, 0xC3, 0xE3, 0xE3, 0xD3, 0xD3, 0xCB, 0xCB, 0xCB, 0xC7, 0xC7, 0xC3,
  0xC3, 0x3C, 0x7E, 0x66, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x7E,
  0x3C, 0xFC, 0xFE, 0xC7, 0xC3, 0xC3, 0xC7, 0xFE, 0xFC, 0xC0, 0xC0, 0xC0,
  0xC0, 0x3C, 0x7E, 0x66, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E,
  0x3C, 0x1C, 0x0F, 0x03, 0xFC, 0x7F, 0x31, 0xD8, 0x6C, 0x36, 0x3B, 0xF9,
  0xF8, 0xC6, 0x63, 0x30, 0xD8, 0x30, 0x3E, 0x7F, 0xC1, 0xC0, 0xE0, 0x7C,
  0x3E, 0x07, 0x03, 0x83, 0xFF, 0x7C, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18,
  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
  0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x3C, 0xC1, 0xE0, 0xD8, 0xCC, 0x66, 0x33,
  0x98, 0xD8, 0x6C, 0x3E, 0x0E, 0x07, 0x03, 0x80, 0xC3, 0xC3, 0xC3, 0xC3,
  0xC3, 0xDB, 0xDB, 0xDB, 0xFF, 0xE7, 0xE7, 0xE7, 0xC3, 0x66, 0x66, 0x3C,
  0x3C, 0x18, 0x18, 0x3C, 0x3C, 0x66, 0x66, 0xC3, 0xC0, 0xD8, 0x66, 0x18,
  0xCC, 0x33, 0x07, 0x81, 0xE0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0xFF,
  0xFF, 0x07, 0x06, 0x0C, 0x18, 0x38, 0x30, 0x60, 0xE0, 0xFF, 0xFF, 0xFE,
  0x31, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8C, 0x63, 0xE0, 0x80, 0x40, 0x40,
  0x40, 0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02,
  0x02, 0x01, 0xF8, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8F, 0xE0,
  0x1C, 0x0E, 0x0D, 0x84, 0x46, 0x36, 0x0E, 0x02, 0xFF, 0xC0, 0x99, 0x90,
  0x7E, 0x7F, 0x03, 0x3F, 0xC3, 0xC3, 0xC3, 0xFF, 0x3F, 0xC0, 0xC0, 0xC0,
  0xC0, 0xC0, 0xFC, 0xFE, 0xC7, 0xC3, 0xC3, 0xC3, 0xC7, 0xFE, 0xFC, 0x1F,
  0x7F, 0xE0, 0xC0, 0xC0, 0xC0, 0xE0, 0x7F, 0x3F, 0x03, 0x03, 0x03, 0x03,
  0x03, 0x3F, 0x7F, 0xE3, 0xC3, 0xC3, 0xC3, 0xE3, 0x7F, 0x3F, 0x3C, 0x7F,
  0xC3, 0xFF, 0xC0, 0xC0, 0xE0, 0x7E, 0x3E, 0x0F, 0x0F, 0xCE, 0x26, 0x03,
  0x07, 0xFB, 0xFC, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x80, 0x3F,
  0x7F, 0xE3, 0xC3, 0xC3, 0xC3, 0xE3, 0x7F, 0x3F, 0x03, 0xFE, 0xFC, 0xC0,
  0xC0, 0xC0, 0xC0, 0xC0, 0xFC, 0xFE, 0xC7, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
  0xC3, 0x18, 0x18, 0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F,
  0x0F, 0x0C, 0x18, 0x03, 0xF7, 0xE0, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30,
  0x7F, 0xDF, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC7, 0xCE, 0xDC, 0xF0,
  0xF0, 0xD8, 0xCC, 0xC6, 0xC3, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18,
  0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x0F, 0xFE, 0xFF, 0xDB, 0xDB, 0xDB,
  0xC3, 0xC3, 0xC3, 0xC3, 0xFC, 0xFE, 0xC7, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
  0xC3, 0x3C, 0x7E, 0xE7, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x3C, 0xFC, 0xFE,
  0xC7, 0xC3, 0xC3, 0xC3, 0xC7, 0xFE, 0xFC, 0xC0, 0xC0, 0xC0, 0x3F, 0x7F,
  0xE3, 0xC3, 0xC3, 0xC3, 0xE3, 0x7F, 0x3F, 0x03, 0x03, 0x03, 0x7F, 0xFF,
  0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x7F, 0xFF, 0x07, 0x87, 0xC3, 0xE1,
  0xFF, 0x7C, 0x30, 0x30, 0x30, 0xFF, 0xFF, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x3F, 0x1F, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xE3, 0x7F, 0x3F, 0xC3,
  0xC3, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x3C, 0x3C, 0xC1, 0xE0, 0xF2, 0x79,
  0x35, 0x93, 0xB9, 0xDC, 0xE6, 0x63, 0x00, 0xC3, 0x66, 0x3C, 0x3C, 0x18,
  0x3C, 0x34, 0x66, 0xC3, 0xC3, 0xC3, 0x67, 0x66, 0x66, 0x36, 0x36, 0x3E,
  0x1C, 0x1C, 0xF8, 0xF0, 0xFF, 0xFC, 0x30, 0xC3, 0x0E, 0x18, 0x7F, 0xFE,
  0x1E, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0xC0, 0x60, 0xC1, 0x83, 0x06,
  0x0C, 0x18, 0x1E, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xF0, 0x30, 0x60, 0xC1,
  0x83, 0x06, 0x0C, 0x06, 0x30, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0xF0, 0x70,
  0xBC, 0xF3, 0xD0, 0xE0 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff10Glyphs[] PROGMEM = {
  {32,     0,   1,   1,  10,    0,    0 },   // 0x00 ' ' 
  {33,     1,   3,  12,  10,    4,  -11 },   // 0x01 '!' 
  {34,     6,   6,   5,  10,    3,  -13 },   // 0x02 '"' 
  {35,    10,   8,  12,  10,    1,  -11 },   // 0x03 '#' 
  {36,    22,   8,  16,  10,    1,  -13 },   // 0x04 '$' 
  {37,    38,   9,  12,  10,    0,  -11 },   // 0x05 '%' 
  {38,    52,   9,  12,  10,    1,  -11 },   // 0x06 '&' 
  {39,    66,   2,   5,  10,    4,  -13 },   // 0x07 ''' 
  {40,    68,   6,  15,  10,    2,  -11 },   // 0x08 '(' 
  {41,    80,   6,  15,  10,    2,  -11 },   // 0x09 ')' 
  {42,    92,   8,   7,  10,    1,  -11 },   // 0x0A '*' 
  {43,    99,   7,   9,  10,    1,   -9 },   // 0x0B '+' 
  {44,   107,   4,   6,  10,    3,   -2 },   // 0x0C ',' 
  {45,   110,   4,   2,  10,    3,   -5 },   // 0x0D '-' 
  {46,   111,   3,   3,  10,    4,   -2 },   // 0x0E '.' 
  {47,   113,   8,  17,  10,    1,  -13 },   // 0x0F '/' 
  {48,   130,   8,  12,  10,    1,  -11 },   // 0x10 '0' 
  {49,   142,   8,  12,  10,    1,  -11 },   // 0x11 '1' 
  {50,   154,   8,  12,  10,    1,  -11 },   // 0x12 '2' 
  {51,   166,   8,  12,  10,    1,  -11 },   // 0x13 '3' 
  {52,   178,   8,  12,  10,    1,  -11 },   // 0x14 '4' 
  {53,   190,   8,  12,  10,    1,  -11 },   // 0x15 '5' 
  {54,   202,   8,  12,  10,    1,  -11 },   // 0x16 '6' 
  {55,   214,   8,  12,  10,    1,  -11 },   // 0x17 '7' 
  {56,   226,   8,  12,  10,    1,  -11 },   // 0x18 '8' 
  {57,   238,   8,  12,  10,    1,  -11 },   // 0x19 '9' 
  {58,   250,   3,   9,  10,    4,   -8 },   // 0x1A ':' 
  {59,   254,   4,  12,  10,    3,   -8 },   // 0x1B ';' 
  {60,   260,   8,   8,  10,    1,   -8 },   // 0x1C '<' 
  {61,   268,   8,   4,  10,    1,   -6 },   // 0x1D '=' 
  {62,   272,   8,   8,  10,    1,   -8 },   // 0x1E '>' 
  {63,   280,   7,  12,  10,    1,  -11 },   // 0x1F '?' 
  {64,   291,   8,  15,  10,    1,  -11 },   // 0x20 '@' 
  {65,   306,   9,  12,  10,    0,  -11 },   // 0x21 'A' 
  {66,   320,   8,  12,  10,    1,  -11 },   // 0x22 'B' 
  {67,   332,   8,  12,  10,    1,  -11 },   // 0x23 'C' 
  {68,   344,   8,  12,  10,    1,  -11 },   // 0x24 'D' 
  {69,   356,   7,  12,  10,    2,  -11 },   // 0x25 'E' 
  {70,   367,   7,  12,  10,    2,  -11 },   // 0x26 'F' 
  {71,   378,   8,  12,  10,    1,  -11 },   // 0x27 'G' 
  {72,   390,   8,  12,  10,    1,  -11 },   // 0x28 'H' 
  {73,   402,   6,  12,  10,    2,  -11 },   // 0x29 'I' 
  {74,   411,   7,  12,  10,    1,  -11 },   // 0x2A 'J' 
  {75,   422,   8,  12,  10,    1,  -11 },   // 0x2B 'K' 
  {76,   434,   7,  12,  10,    2,  -11 },   // 0x2C 'L' 
  {77,   445,   8,  12,  10,    1,  -11 },   // 0x2D 'M' 
  {78,   457,   8,  12,  10,    1,  -11 },   // 0x2E 'N' 
  {79,   469,   8,  12,  10,    1,  -11 },   // 0x2F 'O' 
  {80,   481,   8,  12,  10,    1,  -11 },   // 0x30 'P' 
  {81,   493,   8,  15,  10,    1,  -11 },   // 0x31 'Q' 
  {82,   508,   9,  12,  10,    1,  -11 },   // 0x32 'R' 
  {83,   522,   8,  12,  10,    1,  -11 },   // 0x33 'S' 
  {84,   534,   8,  12,  10,    1,  -11 },   // 0x34 'T' 
  {85,   546,   8,  12,  10,    1,  -11 },   // 0x35 'U' 
  {86,   558,   9,  12,  10,    0,  -11 },   // 0x36 'V' 
  {87,   572,   8,  12,  10,    1,  -11 },   // 0x37 'W' 
  {88,   584,   8,  12,  10,    1,  -11 },   // 0x38 'X' 
  {89,   596,  10,  12,  10,    0,  -11 },   // 0x39 'Y' 
  {90,   611,   8,  12,  10,    1,  -11 },   // 0x3A 'Z' 
  {91,   623,   5,  15,  10,    3,  -11 },   // 0x3B '[' 
  {92,   633,   8,  17,  10,    1,  -13 },   // 0x3C '\' 
  {93,   650,   5,  15,  10,    2,  -11 },   // 0x3D ']' 
  {94,   660,   9,   7,  10,    1,  -11 },   // 0x3E '^' 
  {95,   668,  10,   1,  10,    0,    3 },   // 0x3F '_' 
  {96,   670,   3,   4,  10,    4,  -13 },   // 0x40 '`' 
  {97,   672,   8,   9,  10,    1,   -8 },   // 0x41 'a' 
  {98,   681,   8,  14,  10,    1,  -13 },   // 0x42 'b' 
  {99,   695,   8,   9,  10,    1,   -8 },   // 0x43 'c' 
  {100,   704,   8,  14,  10,    1,  -13 },   // 0x44 'd' 
  {101,   718,   8,   9,  10,    1,   -8 },   // 0x45 'e' 
  {102,   727,   9,  14,  10,    1,  -13 },   // 0x46 'f' 
  {103,   743,   8,  12,  10,    1,   -8 },   // 0x47 'g' 
  {104,   755,   8,  14,  10,    1,  -13 },   // 0x48 'h' 
  {105,   769,   8,  12,  10,    1,  -11 },   // 0x49 'i' 
  {106,   781,   7,  15,  10,    1,  -11 },   // 0x4A 'j' 
  {107,   795,   8,  14,  10,    1,  -13 },   // 0x4B 'k' 
  {108,   809,   8,  14,  10,    1,  -13 },   // 0x4C 'l' 
  {109,   823,   8,   9,  10,    1,   -8 },   // 0x4D 'm' 
  {110,   832,   8,   9,  10,    1,   -8 },   // 0x4E 'n' 
  {111,   841,   8,   9,  10,    1,   -8 },   // 0x4F 'o' 
  {112,   850,   8,  12,  10,    1,   -8 },   // 0x50 'p' 
  {113,   862,   8,  12,  10,    1,   -8 },   // 0x51 'q' 
  {114,   874,   7,   9,  10,    2,   -8 },   // 0x52 'r' 
  {115,   882,   7,   9,  10,    2,   -8 },   // 0x53 's' 
  {116,   890,   8,  12,  10,    1,  -11 },   // 0x54 't' 
  {117,   902,   8,   9,  10,    1,   -8 },   // 0x55 'u' 
  {118,   911,   8,   9,  10,    1,   -8 },   // 0x56 'v' 
  {119,   920,   9,   9,  10,    0,   -8 },   // 0x57 'w' 
  {120,   931,   8,   9,  10,    1,   -8 },   // 0x58 'x' 
  {121,   940,   8,  12,  10,    1,   -8 },   // 0x59 'y' 
  {122,   952,   7,   9,  10,    1,   -8 },   // 0x5A 'z' 
  {123,   960,   7,  17,  10,    2,  -13 },   // 0x5B '{' 
  {124,   975,   2,  17,  10,    4,  -13 },   // 0x5C '|' 
  {125,   980,   7,  17,  10,    1,  -13 },   // 0x5D '}' 
  {126,   995,   9,   4,  10,    1,   -7 }   // 0x5E '~' 
};

const gfxfont_t HotStuff10 PROGMEM = 
{
  (uint8_t  *)HotStuff10Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff10Glyphs, //< Glyph array
  95,// total glyphs in the string
   1,  // newline distance (y axis)
     0,  // minimum X - left most
    -3,  // minimum Y - bottom most (descenders can drive this negative)
    10,  // maximum X - right most
    14}; // maximum Y - top most
// Approx. 1679 bytes -  but your mileage may vary.

#endif