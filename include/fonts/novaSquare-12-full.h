
#ifndef __FIXEDFONTNOVASQUARETTF12
#define __FIXEDFONTNOVASQUARETTF12
const uint8_t HotStuff12Bitmaps[] PROGMEM = {
  0x00, 0x3F, 0xC7, 0xFE, 0xE0, 0x7C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C,
  0x03, 0xFF, 0xFF, 0xFF, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C,
  0x03, 0xC0, 0x38, 0x02, 0xFF, 0xCF, 0xFE, 0xC0, 0x6C, 0x06, 0xC0, 0x6C,
  0x06, 0xC0, 0x6F, 0xFE, 0xFF, 0xEC, 0x07, 0xC0, 0x3C, 0x03, 0xC0, 0x3C,
  0x03, 0xC0, 0x3C, 0x07, 0xFF, 0xEF, 0xFC, 0x3F, 0xC7, 0xFE, 0xE0, 0x3C,
  0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C,
  0x00, 0xC0, 0x3C, 0x03, 0xC0, 0x3E, 0x07, 0x7F, 0xE3, 0xFC, 0xFF, 0xCF,
  0xFE, 0xC0, 0x7C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C,
  0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x07, 0xFF, 0xEF,
  0xFC, 0xFF, 0x3F, 0x8C, 0x03, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0xFF,
  0x3F, 0x8C, 0x03, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0xFF, 0xFF, 0xE0,
  0xFF, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFE, 0xC0, 0xC0,
  0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x3F, 0xC7, 0xFE, 0xE0, 0x3C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x0C, 0x00, 0xC3, 0xFC, 0x3F, 0xC0, 0x3C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3E, 0x07, 0x7F, 0xE3, 0xFC, 0x40, 0x1C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xFF, 0xFF, 0xFF,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x38, 0x02,
  0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x1F, 0xE7, 0xFC, 0x01, 0x80, 0x30, 0x06,
  0x00, 0xC0, 0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x3C, 0x07, 0x80,
  0xF0, 0x1E, 0x03, 0x7F, 0xC7, 0xF0, 0x40, 0xD8, 0x3B, 0x06, 0x61, 0xCC,
  0x71, 0x9C, 0x33, 0x86, 0xE0, 0xFF, 0x9F, 0xFB, 0x01, 0xE0, 0x3C, 0x07,
  0x80, 0xF0, 0x1E, 0x03, 0xC0, 0x70, 0x08, 0x40, 0x30, 0x0C, 0x03, 0x00,
  0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30,
  0x0C, 0x03, 0x00, 0xFF, 0xFF, 0xE0, 0x3F, 0xCF, 0xE3, 0xFF, 0xFF, 0xB0,
  0x1C, 0x07, 0x80, 0x60, 0x3C, 0x03, 0x01, 0xE0, 0x18, 0x0F, 0x00, 0xC0,
  0x78, 0x06, 0x03, 0xC0, 0x30, 0x1E, 0x01, 0x80, 0xF0, 0x0C, 0x07, 0x80,
  0x60, 0x3C, 0x03, 0x01, 0xE0, 0x18, 0x0F, 0x00, 0xC0, 0x78, 0x06, 0x03,
  0xC0, 0x30, 0x1C, 0x01, 0x00, 0x80, 0x3F, 0xC7, 0xFE, 0xC0, 0x7C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x38, 0x02, 0x3F, 0xC7, 0xFE,
  0xE0, 0x7C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3E, 0x07, 0x7F, 0xE3, 0xFC,
  0xFF, 0xCF, 0xFE, 0xC0, 0x7C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03,
  0xC0, 0x3C, 0x07, 0xFF, 0xEF, 0xFC, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00,
  0xC0, 0x08, 0x00, 0x3F, 0xC7, 0xFE, 0xE0, 0x7C, 0x03, 0xC0, 0x3C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC3, 0x3C, 0x3B,
  0xC1, 0xFE, 0x0F, 0x7F, 0xF3, 0xFE, 0xFF, 0xCF, 0xFE, 0xC0, 0x7C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x07, 0xFF, 0xEF, 0xFC,
  0xC3, 0x8C, 0x18, 0xC1, 0xCC, 0x0E, 0xC0, 0x78, 0x07, 0x3F, 0x8F, 0xF9,
  0x83, 0x30, 0x66, 0x08, 0xC0, 0x18, 0x03, 0xFC, 0x3F, 0xC0, 0x0C, 0x01,
  0x80, 0x3C, 0x07, 0x80, 0xF0, 0x1E, 0x03, 0x7F, 0xC7, 0xF0, 0x7F, 0xFF,
  0xFE, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00,
  0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00,
  0x40, 0x40, 0x1C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C,
  0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C,
  0x07, 0x7F, 0xE3, 0xFC, 0x60, 0x0B, 0x80, 0x76, 0x01, 0x9C, 0x06, 0x70,
  0x38, 0xC0, 0xC3, 0x83, 0x0E, 0x0C, 0x18, 0x60, 0x71, 0x81, 0xC6, 0x03,
  0x30, 0x0E, 0xC0, 0x1B, 0x00, 0x78, 0x01, 0xE0, 0x03, 0x80, 0x08, 0x00,
  0x40, 0x10, 0x0E, 0x01, 0x80, 0xF0, 0x0C, 0x07, 0x80, 0x60, 0x3C, 0x03,
  0x01, 0xE0, 0x18, 0x0F, 0x00, 0xC0, 0x78, 0x06, 0x03, 0xC0, 0x30, 0x1E,
  0x01, 0x80, 0xF0, 0x0C, 0x07, 0x80, 0x60, 0x3C, 0x03, 0x01, 0xE0, 0x18,
  0x0F, 0x00, 0xC0, 0x78, 0x0E, 0x03, 0x7F, 0xFF, 0xF1, 0xFE, 0x7F, 0x00,
  0x60, 0x33, 0x81, 0x9C, 0x1C, 0x70, 0xC1, 0x8E, 0x0E, 0xE0, 0x3F, 0x01,
  0xF0, 0x07, 0x00, 0x38, 0x03, 0xE0, 0x1F, 0x81, 0xDC, 0x0C, 0x70, 0xE1,
  0x8E, 0x0E, 0x70, 0x37, 0x01, 0xC0, 0x40, 0x38, 0x0F, 0x01, 0xE0, 0x3C,
  0x07, 0x80, 0xF0, 0x1E, 0x03, 0xC0, 0x78, 0x0D, 0xFF, 0x1F, 0xE0, 0x60,
  0x0C, 0x01, 0x80, 0x30, 0x06, 0x00, 0x80, 0x7F, 0xFF, 0xF8, 0x07, 0x00,
  0xC0, 0x38, 0x06, 0x01, 0xC0, 0x30, 0x0E, 0x01, 0x80, 0x70, 0x0C, 0x03,
  0x80, 0x60, 0x1C, 0x03, 0x00, 0xFF, 0xFF, 0xF8, 0x3F, 0x1F, 0xC0, 0x60,
  0x37, 0xFF, 0xFF, 0x07, 0x83, 0xC1, 0xE0, 0xF0, 0x7F, 0xF7, 0xF8, 0x40,
  0x30, 0x0C, 0x03, 0x00, 0xC0, 0x3F, 0xEF, 0xFF, 0x03, 0xC0, 0xF0, 0x3C,
  0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xFF, 0xDF, 0xE0, 0x7F, 0x7F,
  0xF0, 0x78, 0x3C, 0x16, 0x03, 0x01, 0x80, 0xC0, 0xE0, 0xF0, 0x7F, 0xF7,
  0xF0, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x1B, 0xFF, 0xFF, 0x83, 0xC1, 0xE0,
  0xF0, 0x78, 0x3C, 0x1E, 0x0F, 0x07, 0x83, 0xFF, 0xBF, 0x80, 0x7F, 0x7F,
  0xF0, 0x78, 0x3C, 0x3E, 0x73, 0x71, 0xF0, 0xF0, 0xF0, 0xF0, 0x7F, 0xF7,
  0xF0, 0x1F, 0x3E, 0x30, 0x30, 0x30, 0x30, 0x7F, 0xFE, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x7F, 0x7F, 0xF0, 0x78, 0x3C,
  0x1E, 0x0F, 0x07, 0x83, 0xC1, 0xE0, 0xF0, 0x7F, 0xF7, 0xF8, 0x0C, 0x06,
  0x03, 0x3F, 0xBF, 0x80, 0x40, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x3F, 0xEF,
  0xFF, 0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0x03,
  0xC0, 0xE0, 0x20, 0x7D, 0x80, 0x5B, 0x6D, 0xB6, 0xDB, 0x68, 0x31, 0xCC,
  0x00, 0x08, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8C, 0x63, 0x3B,
  0x80, 0x40, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x6C, 0x3B, 0x3C, 0xDC,
  0x3F, 0xEF, 0xFF, 0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0xE0, 0x20,
  0x7F, 0xFF, 0xFF, 0xFF, 0xE0, 0x7F, 0xFF, 0x7F, 0xFF, 0xF0, 0x60, 0x78,
  0x30, 0x3C, 0x18, 0x1E, 0x0C, 0x0F, 0x06, 0x07, 0x83, 0x03, 0xC1, 0x81,
  0xE0, 0xC0, 0xF0, 0x60, 0x78, 0x30, 0x38, 0x10, 0x10, 0x7F, 0x7F, 0xF0,
  0x78, 0x3C, 0x1E, 0x0F, 0x07, 0x83, 0xC1, 0xE0, 0xF0, 0x78, 0x38, 0x10,
  0x7F, 0x7F, 0xF0, 0x78, 0x3C, 0x1E, 0x0F, 0x07, 0x83, 0xC1, 0xE0, 0xF0,
  0x7F, 0xF7, 0xF0, 0x7F, 0xBF, 0xFC, 0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x0F,
  0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0xFF, 0xFF, 0x30, 0x0C, 0x03, 0x00, 0xC0,
  0x20, 0x00, 0x7F, 0x7F, 0xF0, 0x78, 0x3C, 0x1E, 0x0F, 0x07, 0x83, 0xC1,
  0xE0, 0xF0, 0x7F, 0xF7, 0xF8, 0x0C, 0x06, 0x03, 0x01, 0x80, 0x80, 0x7F,
  0xEC, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0x80, 0x3F, 0x1F, 0xE6,
  0x19, 0x80, 0x60, 0x1F, 0xE3, 0xFC, 0x03, 0x40, 0xF0, 0x3C, 0x0F, 0xFF,
  0x7F, 0x80, 0x08, 0x18, 0x18, 0x18, 0x18, 0x7F, 0xFE, 0x18, 0x18, 0x18,
  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x10, 0x40, 0xE0, 0xF0, 0x78,
  0x3C, 0x1E, 0x0F, 0x07, 0x83, 0xC1, 0xE0, 0xF0, 0x7F, 0xF7, 0xF0, 0xC0,
  0xF8, 0x3E, 0x1D, 0x86, 0x71, 0x9C, 0xE3, 0x30, 0xEC, 0x1F, 0x07, 0x81,
  0xE0, 0x38, 0x0C, 0x00, 0x40, 0x80, 0xE0, 0xC0, 0xF0, 0x60, 0x78, 0x30,
  0x3C, 0x18, 0x1E, 0x0C, 0x0F, 0x06, 0x07, 0x83, 0x03, 0xC1, 0x81, 0xE0,
  0xC0, 0xF0, 0x60, 0x7F, 0xFF, 0xF7, 0xFF, 0xF0, 0xE1, 0x9C, 0x77, 0x38,
  0xEC, 0x1F, 0x07, 0x80, 0xE0, 0x78, 0x1F, 0x0E, 0xC7, 0x39, 0xC7, 0xE1,
  0xC0, 0x40, 0xE0, 0xF0, 0x78, 0x3C, 0x1E, 0x0F, 0x07, 0x83, 0xC1, 0xE0,
  0xF0, 0x7F, 0xF7, 0xF8, 0x0C, 0x06, 0x03, 0x3F, 0xBF, 0x80, 0x7F, 0xFF,
  0xE0, 0x38, 0x1C, 0x06, 0x03, 0x80, 0xC0, 0x70, 0x18, 0x0E, 0x07, 0x01,
  0xFF, 0xFF, 0x80, 0x3F, 0xC7, 0xFE, 0xE0, 0x7C, 0x03, 0xC0, 0x3C, 0x03,
  0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03,
  0xC0, 0x3E, 0x07, 0x7F, 0xE3, 0xFC, 0x09, 0xFF, 0xF9, 0x8C, 0x63, 0x18,
  0xC6, 0x31, 0x8C, 0x63, 0x18, 0x80, 0x3F, 0x8F, 0xFB, 0x01, 0xE0, 0x3C,
  0x07, 0x80, 0xC0, 0x18, 0x03, 0x00, 0xC0, 0x38, 0x0E, 0x03, 0x80, 0xE0,
  0x38, 0x0E, 0x03, 0x80, 0xFF, 0xFF, 0xFC, 0x7F, 0xCF, 0xF0, 0x0E, 0x01,
  0x80, 0x70, 0x0C, 0x03, 0x80, 0x7C, 0x1F, 0xC0, 0x0C, 0x01, 0x80, 0x3C,
  0x07, 0x80, 0xF0, 0x1E, 0x03, 0x7F, 0xC7, 0xF0, 0x00, 0x20, 0x03, 0x00,
  0x38, 0x03, 0xC0, 0x3E, 0x01, 0xB0, 0x19, 0x81, 0x8C, 0x1C, 0x61, 0xC3,
  0x0C, 0x18, 0xFF, 0xF7, 0xFF, 0x00, 0x30, 0x01, 0x80, 0x0C, 0x00, 0x60,
  0x02, 0x00, 0x1F, 0xC7, 0xF8, 0xC0, 0x18, 0x03, 0x00, 0xE0, 0x18, 0x03,
  0xFC, 0x3F, 0xC0, 0x0C, 0x01, 0x80, 0x3C, 0x07, 0x80, 0xF0, 0x1E, 0x03,
  0x7F, 0xC7, 0xF0, 0x3F, 0xC7, 0xFE, 0xE0, 0x3C, 0x03, 0xC0, 0x3C, 0x00,
  0xC0, 0x0F, 0xFC, 0xFF, 0xEC, 0x07, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03,
  0xC0, 0x3C, 0x07, 0x7F, 0xE3, 0xFC, 0xFF, 0xFF, 0xF8, 0x07, 0x00, 0xE0,
  0x18, 0x07, 0x00, 0xE0, 0x18, 0x07, 0x00, 0xC0, 0x38, 0x07, 0x00, 0xC0,
  0x38, 0x07, 0x00, 0xC0, 0x38, 0x07, 0x00, 0x3F, 0x8F, 0xF9, 0x83, 0x30,
  0x66, 0x0C, 0xC1, 0x98, 0x33, 0xFE, 0x7F, 0xD8, 0x0F, 0x01, 0xE0, 0x3C,
  0x07, 0x80, 0xF0, 0x1E, 0x03, 0x7F, 0xC7, 0xF0, 0x3F, 0xC7, 0xFE, 0xC0,
  0x7C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x77, 0xFF, 0x3F,
  0xF0, 0x03, 0x00, 0x3C, 0x03, 0xC0, 0x3C, 0x07, 0x7F, 0xE3, 0xFC, 0xFF,
  0xFF, 0xF0, 0x7F, 0x02, 0x07, 0xFC, 0x30, 0x30, 0x61, 0x81, 0x83, 0x18,
  0x0C, 0x18, 0xC0, 0x60, 0xCC, 0x03, 0x06, 0x60, 0x1F, 0xF7, 0x00, 0x7F,
  0x30, 0x00, 0x03, 0xBF, 0x80, 0x1B, 0xFE, 0x00, 0xD8, 0x30, 0x0C, 0xC1,
  0x80, 0x66, 0x0C, 0x06, 0x30, 0x60, 0x31, 0x83, 0x03, 0x0F, 0xF8, 0x18,
  0x3F, 0x80, 0xFF, 0x80, 0x27, 0x33, 0x36, 0x40, 0x2D, 0xB6, 0xDB, 0x6D,
  0xB4, 0x03, 0xEC, 0xFF, 0x80, 0x07, 0xFC, 0x7F, 0xFB, 0x06, 0x0C, 0x18,
  0x30, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x06,
  0x0C, 0x18, 0x3F, 0xFE, 0x7F, 0xFC, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x06,
  0x0C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xDF,
  0xFE, 0x1B, 0xF9, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xC6,
  0x31, 0x8E, 0x3C, 0x60, 0xC7, 0x8E, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0x31,
  0x8C, 0x63, 0x18, 0xC6, 0x33, 0xFB, 0x00 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff12Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   9,    0,    0 },   // 0x00 ' ' 
  {65,     1,  12,  18,  17,    2,  -17 },   // 0x01 'A' 
  {66,    28,  12,  18,  16,    2,  -17 },   // 0x02 'B' 
  {67,    55,  12,  18,  17,    2,  -17 },   // 0x03 'C' 
  {68,    82,  12,  18,  16,    2,  -17 },   // 0x04 'D' 
  {69,   109,  10,  18,  14,    2,  -17 },   // 0x05 'E' 
  {70,   132,   8,  18,  13,    2,  -17 },   // 0x06 'F' 
  {71,   150,  12,  18,  17,    2,  -17 },   // 0x07 'G' 
  {72,   177,  12,  18,  16,    2,  -17 },   // 0x08 'H' 
  {73,   204,   2,  18,   7,    2,  -17 },   // 0x09 'I' 
  {74,   209,  11,  18,  15,    1,  -17 },   // 0x0A 'J' 
  {75,   234,  11,  18,  16,    2,  -17 },   // 0x0B 'K' 
  {76,   259,  10,  18,  13,    2,  -17 },   // 0x0C 'L' 
  {77,   282,  21,  18,  26,    2,  -17 },   // 0x0D 'M' 
  {78,   330,  12,  18,  17,    2,  -17 },   // 0x0E 'N' 
  {79,   357,  12,  18,  17,    2,  -17 },   // 0x0F 'O' 
  {80,   384,  12,  18,  16,    2,  -17 },   // 0x10 'P' 
  {81,   411,  12,  18,  17,    2,  -17 },   // 0x11 'Q' 
  {82,   438,  12,  18,  16,    2,  -17 },   // 0x12 'R' 
  {83,   465,  11,  18,  16,    2,  -17 },   // 0x13 'S' 
  {84,   490,  12,  18,  13,    0,  -17 },   // 0x14 'T' 
  {85,   517,  12,  18,  17,    2,  -17 },   // 0x15 'U' 
  {86,   544,  14,  18,  14,    0,  -17 },   // 0x16 'V' 
  {87,   576,  21,  18,  26,    2,  -17 },   // 0x17 'W' 
  {88,   624,  13,  18,  15,    1,  -17 },   // 0x18 'X' 
  {89,   654,  11,  18,  15,    2,  -17 },   // 0x19 'Y' 
  {90,   679,  11,  18,  15,    2,  -17 },   // 0x1A 'Z' 
  {97,   704,   9,  13,  12,    1,  -12 },   // 0x1B 'a' 
  {98,   719,  10,  18,  14,    2,  -17 },   // 0x1C 'b' 
  {99,   742,   9,  13,  13,    2,  -12 },   // 0x1D 'c' 
  {100,   757,   9,  18,  14,    2,  -17 },   // 0x1E 'd' 
  {101,   778,   9,  13,  13,    2,  -12 },   // 0x1F 'e' 
  {102,   793,   8,  18,  10,    0,  -17 },   // 0x20 'f' 
  {103,   811,   9,  18,  14,    2,  -12 },   // 0x21 'g' 
  {104,   832,  10,  18,  14,    2,  -17 },   // 0x22 'h' 
  {105,   855,   3,  18,   7,    2,  -17 },   // 0x23 'i' 
  {106,   862,   5,  23,   7,    0,  -17 },   // 0x24 'j' 
  {107,   877,  10,  18,  14,    2,  -17 },   // 0x25 'k' 
  {108,   900,   2,  18,   7,    2,  -17 },   // 0x26 'l' 
  {109,   905,  17,  13,  21,    2,  -12 },   // 0x27 'm' 
  {110,   933,   9,  13,  13,    2,  -12 },   // 0x28 'n' 
  {111,   948,   9,  13,  13,    2,  -12 },   // 0x29 'o' 
  {112,   963,  10,  18,  14,    2,  -12 },   // 0x2A 'p' 
  {113,   986,   9,  18,  14,    2,  -12 },   // 0x2B 'q' 
  {114,  1007,   6,  13,   8,    2,  -12 },   // 0x2C 'r' 
  {115,  1017,  10,  13,  13,    1,  -12 },   // 0x2D 's' 
  {116,  1034,   8,  18,   9,    0,  -17 },   // 0x2E 't' 
  {117,  1052,   9,  13,  13,    2,  -12 },   // 0x2F 'u' 
  {118,  1067,  10,  13,  12,    1,  -12 },   // 0x30 'v' 
  {119,  1084,  17,  13,  21,    2,  -12 },   // 0x31 'w' 
  {120,  1112,  10,  13,  12,    1,  -12 },   // 0x32 'x' 
  {121,  1129,   9,  18,  14,    2,  -12 },   // 0x33 'y' 
  {122,  1150,  10,  13,  12,    1,  -12 },   // 0x34 'z' 
  {48,  1167,  12,  18,  17,    2,  -17 },   // 0x35 '0' 
  {49,  1194,   5,  18,   8,    0,  -17 },   // 0x36 '1' 
  {50,  1206,  11,  18,  16,    2,  -17 },   // 0x37 '2' 
  {51,  1231,  11,  18,  16,    2,  -17 },   // 0x38 '3' 
  {52,  1256,  13,  18,  14,    0,  -17 },   // 0x39 '4' 
  {53,  1286,  11,  18,  16,    2,  -17 },   // 0x3A '5' 
  {54,  1311,  12,  18,  17,    2,  -17 },   // 0x3B '6' 
  {55,  1338,  11,  18,  12,    1,  -17 },   // 0x3C '7' 
  {56,  1363,  11,  18,  16,    2,  -17 },   // 0x3D '8' 
  {57,  1388,  12,  18,  17,    2,  -17 },   // 0x3E '9' 
  {45,  1415,  10,   2,  14,    2,   -9 },   // 0x3F '-' 
  {37,  1418,  21,  18,  25,    2,  -17 },   // 0x40 '%' 
  {46,  1466,   3,   3,   7,    2,   -2 },   // 0x41 '.' 
  {44,  1468,   4,   7,   7,    1,   -3 },   // 0x42 ',' 
  {33,  1472,   3,  18,   7,    2,  -17 },   // 0x43 '!' 
  {58,  1479,   3,  10,   7,    2,   -9 },   // 0x44 ':' 
  {91,  1483,   7,  24,  10,    2,  -20 },   // 0x45 '[' 
  {93,  1504,   7,  24,  10,    0,  -20 },   // 0x46 ']' 
  {40,  1525,   5,  23,   9,    2,  -19 },   // 0x47 '(' 
  {41,  1540,   5,  23,   9,    1,  -19 }   // 0x48 ')' 
};

const gfxfont_t HotStuff12 PROGMEM = 
{
  (uint8_t  *)HotStuff12Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff12Glyphs, //< Glyph array
  73,// total glyphs in the string
  24,  // newline distance (y axis)
     0,  // minimum X - left most
    -5,  // minimum Y - bottom most (descenders can drive this negative)
    23,  // maximum X - right most
    21}; // maximum Y - top most
// Approx. 2080 bytes -  but your mileage may vary.

#endif