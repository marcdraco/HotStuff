
#ifndef __FIXEDFONTANONYMOUSPROBOLDTTF5
#define __FIXEDFONTANONYMOUSPROBOLDTTF5
const uint8_t HotStuff5Bitmaps[] PROGMEM = {
  0x66, 0xBB, 0xFB, 0xED, 0xED, 0xDE, 0x7D, 0xCC, 0xD6, 0xED, 0xDD, 0xDE,
  0xFC, 0xFC, 0xCF, 0xFC, 0xEC, 0xCC, 0x7D, 0xCF, 0xD6, 0xDD, 0xFD, 0xDD,
  0xF6, 0x66, 0x6F, 0x33, 0x33, 0xB6, 0xDE, 0xCE, 0xDD, 0xCC, 0xCC, 0xCF,
  0x9F, 0xFD, 0xDD, 0xDF, 0xFF, 0xFD, 0x6D, 0xDD, 0xD6, 0xED, 0xDE, 0xCC,
  0x6D, 0xDD, 0xD6, 0x63, 0xED, 0xDE, 0xED, 0x7D, 0xE7, 0xBE, 0xFF, 0x58,
  0xC6, 0x78, 0xDD, 0xDD, 0xD6, 0xDD, 0xDD, 0x66, 0xDD, 0xDF, 0xF9, 0xDD,
  0x66, 0xBB, 0xDE, 0x98, 0xC6, 0x78, 0xFB, 0x7E, 0xDF, 0xE3, 0xFB, 0x70,
  0xCC, 0xED, 0xDD, 0xE0, 0x7D, 0xCC, 0x70, 0x73, 0x7B, 0xBB, 0x70, 0x6D,
  0xFC, 0x70, 0x3B, 0x3E, 0xC6, 0x33, 0xC0, 0x7B, 0xBB, 0x73, 0x60, 0xCC,
  0xED, 0xDD, 0xD0, 0x60, 0xE6, 0x66, 0xF0, 0x63, 0xB6, 0xDB, 0xC0, 0xCC,
  0xDE, 0xCE, 0xD0, 0xE6, 0x66, 0x66, 0xF0, 0xD7, 0xFF, 0x5A, 0x80, 0xED,
  0xDD, 0xD0, 0x6D, 0xDD, 0x60, 0xED, 0xDD, 0xEC, 0xC0, 0x7B, 0xBB, 0x73,
  0x30, 0xD6, 0x66, 0xF0, 0x7C, 0xF3, 0xE0, 0x66, 0xF6, 0x67, 0x20, 0xBB,
  0xBB, 0x70, 0xDD, 0xD6, 0x60, 0xDD, 0xFF, 0x90, 0xDD, 0x6B, 0xB0, 0xDD,
  0xD6, 0x64, 0xC0, 0xFB, 0x6D, 0xF0, 0x6D, 0xFD, 0xD6, 0x26, 0xE6, 0x6F,
  0x6B, 0x36, 0xDF, 0x6B, 0x63, 0xB6, 0x33, 0xAD, 0xF3, 0x3C, 0xFC, 0xE3,
  0xB6, 0x6C, 0xED, 0xD6, 0xFB, 0x36, 0x66, 0x6D, 0x6B, 0xB6, 0x6B, 0xB7,
  0x36, 0xF0, 0x4D, 0x98, 0x66, 0xC8, 0xF0, 0xF8, 0xFF, 0x30, 0xF3, 0xC0,
  0xEA, 0xAA, 0xC0, 0xD5, 0x55, 0xC0, 0x2B, 0x6D, 0xB2, 0x20, 0x89, 0xB6,
  0xDA, 0x80 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff5Glyphs[] PROGMEM = {
  {32,     0,   0,   0,   5,    0,    1 },   // 0x00 ' ' 
  {65,     0,   4,   6,   5,    0,   -5 },   // 0x01 'A' 
  {66,     3,   4,   6,   5,    0,   -5 },   // 0x02 'B' 
  {67,     6,   4,   6,   5,    0,   -5 },   // 0x03 'C' 
  {68,     9,   4,   6,   5,    0,   -5 },   // 0x04 'D' 
  {69,    12,   4,   6,   5,    0,   -5 },   // 0x05 'E' 
  {70,    15,   4,   6,   5,    0,   -5 },   // 0x06 'F' 
  {71,    18,   4,   6,   5,    0,   -5 },   // 0x07 'G' 
  {72,    21,   4,   6,   5,    0,   -5 },   // 0x08 'H' 
  {73,    24,   4,   6,   5,    0,   -5 },   // 0x09 'I' 
  {74,    27,   4,   6,   5,    0,   -5 },   // 0x0A 'J' 
  {75,    30,   4,   6,   5,    0,   -5 },   // 0x0B 'K' 
  {76,    33,   4,   6,   5,    0,   -5 },   // 0x0C 'L' 
  {77,    36,   4,   6,   5,    0,   -5 },   // 0x0D 'M' 
  {78,    39,   4,   6,   5,    0,   -5 },   // 0x0E 'N' 
  {79,    42,   4,   6,   5,    0,   -5 },   // 0x0F 'O' 
  {80,    45,   4,   6,   5,    0,   -5 },   // 0x10 'P' 
  {81,    48,   4,   8,   5,    0,   -5 },   // 0x11 'Q' 
  {82,    52,   4,   6,   5,    0,   -5 },   // 0x12 'R' 
  {83,    55,   4,   6,   5,    0,   -5 },   // 0x13 'S' 
  {84,    58,   5,   6,   5,    0,   -5 },   // 0x14 'T' 
  {85,    62,   4,   6,   5,    0,   -5 },   // 0x15 'U' 
  {86,    65,   4,   6,   5,    0,   -5 },   // 0x16 'V' 
  {87,    68,   4,   6,   5,    0,   -5 },   // 0x17 'W' 
  {88,    71,   4,   6,   5,    0,   -5 },   // 0x18 'X' 
  {89,    74,   5,   6,   5,    0,   -5 },   // 0x19 'Y' 
  {90,    78,   4,   6,   5,    0,   -5 },   // 0x1A 'Z' 
  {97,    81,   4,   5,   5,    0,   -4 },   // 0x1B 'a' 
  {98,    84,   4,   7,   5,    0,   -6 },   // 0x1C 'b' 
  {99,    88,   4,   5,   5,    0,   -4 },   // 0x1D 'c' 
  {100,    91,   4,   7,   5,    0,   -6 },   // 0x1E 'd' 
  {101,    95,   4,   5,   5,    0,   -4 },   // 0x1F 'e' 
  {102,    98,   5,   7,   5,    0,   -6 },   // 0x20 'f' 
  {103,   103,   4,   7,   5,    0,   -4 },   // 0x21 'g' 
  {104,   107,   4,   7,   5,    0,   -6 },   // 0x22 'h' 
  {105,   111,   4,   7,   5,    0,   -6 },   // 0x23 'i' 
  {106,   115,   3,   9,   5,    0,   -6 },   // 0x24 'j' 
  {107,   119,   4,   7,   5,    0,   -6 },   // 0x25 'k' 
  {108,   123,   4,   7,   5,    0,   -6 },   // 0x26 'l' 
  {109,   127,   5,   5,   5,    0,   -4 },   // 0x27 'm' 
  {110,   131,   4,   5,   5,    0,   -4 },   // 0x28 'n' 
  {111,   134,   4,   5,   5,    0,   -4 },   // 0x29 'o' 
  {112,   137,   4,   7,   5,    0,   -4 },   // 0x2A 'p' 
  {113,   141,   4,   7,   5,    0,   -4 },   // 0x2B 'q' 
  {114,   145,   4,   5,   5,    0,   -4 },   // 0x2C 'r' 
  {115,   148,   4,   5,   5,    0,   -4 },   // 0x2D 's' 
  {116,   151,   4,   7,   5,    0,   -6 },   // 0x2E 't' 
  {117,   155,   4,   5,   5,    0,   -4 },   // 0x2F 'u' 
  {118,   158,   4,   5,   5,    0,   -4 },   // 0x30 'v' 
  {119,   161,   4,   5,   5,    0,   -4 },   // 0x31 'w' 
  {120,   164,   4,   5,   5,    0,   -4 },   // 0x32 'x' 
  {121,   167,   4,   7,   5,    0,   -4 },   // 0x33 'y' 
  {122,   171,   4,   5,   5,    0,   -4 },   // 0x34 'z' 
  {48,   174,   4,   6,   5,    0,   -5 },   // 0x35 '0' 
  {49,   177,   4,   6,   5,    0,   -5 },   // 0x36 '1' 
  {50,   180,   4,   6,   5,    0,   -5 },   // 0x37 '2' 
  {51,   183,   4,   6,   5,    0,   -5 },   // 0x38 '3' 
  {52,   186,   5,   6,   5,    0,   -5 },   // 0x39 '4' 
  {53,   190,   4,   6,   5,    0,   -5 },   // 0x3A '5' 
  {54,   193,   4,   6,   5,    0,   -5 },   // 0x3B '6' 
  {55,   196,   4,   6,   5,    0,   -5 },   // 0x3C '7' 
  {56,   199,   4,   6,   5,    0,   -5 },   // 0x3D '8' 
  {57,   202,   4,   6,   5,    0,   -5 },   // 0x3E '9' 
  {45,   205,   4,   1,   5,    0,   -2 },   // 0x3F '-' 
  {37,   206,   5,   6,   5,    0,   -5 },   // 0x40 '%' 
  {46,   210,   2,   2,   5,    1,   -1 },   // 0x41 '.' 
  {44,   211,   2,   3,   5,    1,    0 },   // 0x42 ',' 
  {33,   212,   2,   6,   5,    1,   -5 },   // 0x43 '!' 
  {58,   214,   2,   5,   5,    1,   -4 },   // 0x44 ':' 
  {91,   216,   2,   9,   5,    2,   -6 },   // 0x45 '[' 
  {93,   219,   2,   9,   5,    1,   -6 },   // 0x46 ']' 
  {40,   222,   3,   9,   5,    1,   -6 },   // 0x47 '(' 
  {41,   226,   3,   9,   5,    1,   -6 }   // 0x48 ')' 
};

const gfxfont_t HotStuff5 PROGMEM = 
{
  (uint8_t  *)HotStuff5Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff5Glyphs, //< Glyph array
  73,// total glyphs in the string
   9,  // newline distance (y axis)
     0,  // minimum X - left most
    -2,  // minimum Y - bottom most (descenders can drive this negative)
     5,  // maximum X - right most
     7}; // maximum Y - top most
// Approx. 755 bytes -  but your mileage may vary.

#endif