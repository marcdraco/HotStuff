
#ifndef __FIXEDFONTBPMONOBOLDSTENCILTTF5
#define __FIXEDFONTBPMONOBOLDSTENCILTTF5
const uint8_t HotStuff5Bitmaps[] PROGMEM = {
  0x00, 0x00, 0x10, 0x38, 0x6C, 0x6C, 0x7C, 0x6C, 0x6C, 0x00, 0x00, 0x78,
  0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x78, 0x00, 0x00, 0x38, 0xC3, 0x06, 0x0C,
  0x0C, 0x0E, 0x00, 0x00, 0x70, 0x68, 0x6C, 0x6C, 0x6C, 0x68, 0x70, 0x00,
  0x00, 0xF1, 0x83, 0x07, 0x8C, 0x18, 0x3C, 0x00, 0x00, 0xF9, 0x83, 0x07,
  0x8C, 0x18, 0x30, 0x00, 0x00, 0x18, 0x24, 0x60, 0x6C, 0x6C, 0x2C, 0x18,
  0x00, 0x01, 0xB3, 0x66, 0xCF, 0x9B, 0x36, 0x6C, 0x00, 0x00, 0xF0, 0xC1,
  0x83, 0x06, 0x0C, 0x3C, 0x00, 0x01, 0xE1, 0x86, 0x18, 0x61, 0x9C, 0x00,
  0x00, 0xC9, 0xA3, 0x87, 0x0F, 0x1B, 0x32, 0x00, 0x00, 0xC1, 0x83, 0x06,
  0x0C, 0x18, 0x3E, 0x00, 0x01, 0x13, 0x67, 0xC9, 0x93, 0x26, 0x4C, 0x00,
  0x01, 0xB3, 0x66, 0xCB, 0x93, 0x26, 0x4C, 0x00, 0x00, 0x38, 0x6C, 0x6C,
  0x6C, 0x6C, 0x6C, 0x38, 0x00, 0x03, 0xCD, 0xB6, 0xDB, 0xCC, 0x30, 0x00,
  0x00, 0x38, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x38, 0x10, 0x0C, 0x00, 0x03,
  0xCD, 0xB6, 0xDB, 0xCD, 0xB6, 0x00, 0x00, 0xC6, 0x98, 0x30, 0x65, 0x8C,
  0x00, 0x00, 0xF0, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x00, 0x01, 0xB3, 0x66,
  0xCD, 0x9B, 0x36, 0x38, 0x00, 0x00, 0x99, 0x32, 0x63, 0xC7, 0x0E, 0x08,
  0x00, 0x00, 0x89, 0x12, 0x25, 0x4A, 0x8A, 0x14, 0x00, 0x00, 0x99, 0x31,
  0xC1, 0x07, 0x19, 0x32, 0x00, 0x00, 0x99, 0x31, 0x43, 0x86, 0x0C, 0x18,
  0x00, 0x00, 0xF8, 0x30, 0xC1, 0x86, 0x18, 0x3E, 0x00, 0x00, 0xE0, 0x63,
  0xCD, 0x8F, 0x00, 0x00, 0x00, 0x03, 0x06, 0x0F, 0x1B, 0x36, 0x6C, 0xF0,
  0x00, 0x00, 0x71, 0x83, 0x06, 0x07, 0x00, 0x00, 0x00, 0x18, 0x30, 0x63,
  0xCD, 0x9B, 0x36, 0x3C, 0x00, 0x00, 0x71, 0xB3, 0xE6, 0x07, 0x80, 0x00,
  0x00, 0x38, 0xC1, 0x87, 0xC6, 0x0C, 0x18, 0x7C, 0x00, 0x00, 0xF3, 0x66,
  0xCD, 0x8F, 0x06, 0x38, 0x00, 0x00, 0x0C, 0x30, 0xF3, 0x6D, 0xB6, 0xD8,
  0x00, 0x00, 0x60, 0x03, 0x83, 0x06, 0x0C, 0x3C, 0x00, 0x00, 0xC0, 0x3C,
  0x30, 0xC3, 0x0C, 0x33, 0x80, 0x00, 0x00, 0x03, 0x06, 0x0D, 0x9B, 0x3C,
  0x6C, 0xD8, 0x00, 0x00, 0x01, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x78, 0x00,
  0x01, 0x5B, 0xF5, 0x6A, 0xD5, 0x80, 0x00, 0x03, 0x4F, 0xB6, 0xDB, 0x60,
  0x00, 0x00, 0x38, 0x6C, 0x6C, 0x6C, 0x38, 0x00, 0x01, 0xA3, 0xE6, 0xCD,
  0x9E, 0x30, 0x60, 0x00, 0x00, 0xF3, 0x66, 0xCD, 0x8F, 0x06, 0x0C, 0x00,
  0x01, 0xB1, 0x83, 0x06, 0x1E, 0x00, 0x00, 0x01, 0xCC, 0x18, 0x33, 0x80,
  0x00, 0x00, 0x61, 0xE1, 0x83, 0x06, 0x06, 0x00, 0x01, 0xB3, 0x66, 0xCD,
  0x8D, 0x00, 0x00, 0x00, 0xC9, 0x91, 0xC3, 0x82, 0x00, 0x00, 0x01, 0x8B,
  0x56, 0xAD, 0x4D, 0x00, 0x00, 0x00, 0x98, 0xE0, 0x83, 0x8C, 0x80, 0x00,
  0x00, 0x99, 0x31, 0x62, 0x82, 0x0C, 0x30, 0x00, 0x00, 0xF8, 0x30, 0x86,
  0x0F, 0x80, 0x00, 0x00, 0x38, 0x4C, 0x4C, 0x5C, 0x6C, 0x4C, 0x38, 0x00,
  0x00, 0x61, 0xC1, 0x83, 0x06, 0x0C, 0x3C, 0x00, 0x01, 0x8B, 0x0C, 0x63,
  0x0C, 0x3C, 0x00, 0x00, 0x61, 0x60, 0xC3, 0x03, 0x16, 0x18, 0x00, 0x00,
  0x20, 0xC3, 0x8B, 0x1F, 0x0C, 0x18, 0x00, 0x00, 0x71, 0x83, 0x81, 0x83,
  0x06, 0x38, 0x00, 0x00, 0xC4, 0x20, 0xE2, 0xCB, 0x18, 0x00, 0x03, 0xE1,
  0x8C, 0x61, 0x8C, 0x30, 0x00, 0x00, 0x30, 0x58, 0x58, 0x30, 0x58, 0x58,
  0x30, 0x00, 0x01, 0x8B, 0x2C, 0xB1, 0xC3, 0x18, 0x00, 0x00, 0xF8, 0x00,
  0x00, 0x3E, 0x54, 0x28, 0x08, 0x14, 0x2A, 0x44, 0x00, 0xD8, 0x00, 0x0B,
  0x40, 0x03, 0x6D, 0x86, 0xC0, 0xD8, 0x6C, 0x00, 0x1F, 0x6D, 0xB6, 0xDC,
  0x00, 0x1D, 0xB6, 0xDB, 0x7C, 0x00, 0x01, 0x08, 0x84, 0x21, 0x0C, 0x21,
  0x00, 0x02, 0x08, 0x42, 0x10, 0x84, 0x22, 0x00, 0x00, 0x20, 0x84, 0x10,
  0x82, 0x10, 0x40, 0x00, 0x00 };

// Glyph, Offset to bitmap, Width, Height, xAdvance, xOffset, yOffset

const gfxglyph_t HotStuff5Glyphs[] PROGMEM = {
  {32,     0,   1,   1,   6,    0,    0 },   // 0x00 ' ' 
  {65,     1,   8,   9,   6,   -1,   -7 },   // 0x01 'A' 
  {66,    10,   8,   9,   6,   -1,   -7 },   // 0x02 'B' 
  {67,    19,   7,   9,   6,   -1,   -7 },   // 0x03 'C' 
  {68,    27,   8,   9,   6,   -1,   -7 },   // 0x04 'D' 
  {69,    36,   7,   9,   6,   -1,   -7 },   // 0x05 'E' 
  {70,    44,   7,   9,   6,   -1,   -7 },   // 0x06 'F' 
  {71,    52,   8,   9,   7,   -1,   -7 },   // 0x07 'G' 
  {72,    61,   7,   9,   7,    0,   -7 },   // 0x08 'H' 
  {73,    69,   7,   9,   6,   -1,   -7 },   // 0x09 'I' 
  {74,    77,   6,   9,   6,    0,   -7 },   // 0x0A 'J' 
  {75,    84,   7,   9,   6,   -1,   -7 },   // 0x0B 'K' 
  {76,    92,   7,   9,   6,   -1,   -7 },   // 0x0C 'L' 
  {77,   100,   7,   9,   6,    0,   -7 },   // 0x0D 'M' 
  {78,   108,   7,   9,   7,    0,   -7 },   // 0x0E 'N' 
  {79,   116,   8,   9,   6,   -1,   -7 },   // 0x0F 'O' 
  {80,   125,   6,   9,   6,    0,   -7 },   // 0x10 'P' 
  {81,   132,   8,  11,   6,   -1,   -7 },   // 0x11 'Q' 
  {82,   143,   6,   9,   6,    0,   -7 },   // 0x12 'R' 
  {83,   150,   6,   9,   6,    0,   -7 },   // 0x13 'S' 
  {84,   157,   7,   9,   6,   -1,   -7 },   // 0x14 'T' 
  {85,   165,   7,   9,   7,    0,   -7 },   // 0x15 'U' 
  {86,   173,   7,   9,   6,   -1,   -7 },   // 0x16 'V' 
  {87,   181,   7,   9,   6,   -1,   -7 },   // 0x17 'W' 
  {88,   189,   7,   9,   6,   -1,   -7 },   // 0x18 'X' 
  {89,   197,   7,   9,   6,   -1,   -7 },   // 0x19 'Y' 
  {90,   205,   7,   9,   6,   -1,   -7 },   // 0x1A 'Z' 
  {97,   213,   7,   7,   6,    0,   -5 },   // 0x1B 'a' 
  {98,   220,   7,  10,   6,    0,   -8 },   // 0x1C 'b' 
  {99,   229,   7,   7,   6,   -1,   -5 },   // 0x1D 'c' 
  {100,   236,   7,  10,   6,   -1,   -8 },   // 0x1E 'd' 
  {101,   245,   7,   7,   6,   -1,   -5 },   // 0x1F 'e' 
  {102,   252,   7,  10,   6,   -1,   -8 },   // 0x20 'f' 
  {103,   261,   7,   9,   7,    0,   -5 },   // 0x21 'g' 
  {104,   269,   6,  10,   6,    0,   -8 },   // 0x22 'h' 
  {105,   277,   7,   9,   6,   -1,   -7 },   // 0x23 'i' 
  {106,   285,   6,  11,   6,    0,   -7 },   // 0x24 'j' 
  {107,   294,   7,  10,   6,    0,   -8 },   // 0x25 'k' 
  {108,   303,   7,  10,   6,   -1,   -8 },   // 0x26 'l' 
  {109,   312,   7,   7,   6,   -1,   -5 },   // 0x27 'm' 
  {110,   319,   6,   7,   6,    0,   -5 },   // 0x28 'n' 
  {111,   325,   8,   7,   7,   -1,   -5 },   // 0x29 'o' 
  {112,   332,   7,   9,   6,    0,   -5 },   // 0x2A 'p' 
  {113,   340,   7,   9,   6,    0,   -5 },   // 0x2B 'q' 
  {114,   348,   7,   7,   6,    0,   -5 },   // 0x2C 'r' 
  {115,   355,   6,   7,   6,    0,   -5 },   // 0x2D 's' 
  {116,   361,   7,   8,   6,   -1,   -6 },   // 0x2E 't' 
  {117,   368,   7,   7,   6,    0,   -5 },   // 0x2F 'u' 
  {118,   375,   7,   7,   6,   -1,   -5 },   // 0x30 'v' 
  {119,   382,   7,   7,   6,   -1,   -5 },   // 0x31 'w' 
  {120,   389,   7,   7,   6,   -1,   -5 },   // 0x32 'x' 
  {121,   396,   7,   9,   6,   -1,   -5 },   // 0x33 'y' 
  {122,   404,   7,   7,   6,   -1,   -5 },   // 0x34 'z' 
  {48,   411,   8,   9,   6,   -1,   -7 },   // 0x35 '0' 
  {49,   420,   7,   9,   6,   -1,   -7 },   // 0x36 '1' 
  {50,   428,   6,   9,   6,    0,   -7 },   // 0x37 '2' 
  {51,   435,   7,   9,   6,   -1,   -7 },   // 0x38 '3' 
  {52,   443,   7,   9,   6,    0,   -7 },   // 0x39 '4' 
  {53,   451,   7,   9,   6,   -1,   -7 },   // 0x3A '5' 
  {54,   459,   6,   9,   6,    0,   -7 },   // 0x3B '6' 
  {55,   466,   6,   9,   6,    0,   -7 },   // 0x3C '7' 
  {56,   473,   8,   9,   6,   -1,   -7 },   // 0x3D '8' 
  {57,   482,   6,   9,   6,    0,   -7 },   // 0x3E '9' 
  {45,   489,   7,   3,   6,   -1,   -3 },   // 0x3F '-' 
  {37,   492,   8,   9,   6,   -1,   -7 },   // 0x40 '%' 
  {46,   501,   3,   3,   6,    1,   -1 },   // 0x41 '.' 
  {44,   503,   3,   4,   6,    1,   -1 },   // 0x42 ',' 
  {33,   505,   3,  10,   6,    1,   -8 },   // 0x43 '!' 
  {58,   509,   3,   6,   6,    1,   -4 },   // 0x44 ':' 
  {91,   512,   3,  11,   6,    1,   -8 },   // 0x45 '[' 
  {93,   517,   3,  11,   6,    1,   -8 },   // 0x46 ']' 
  {40,   522,   5,  11,   6,    0,   -8 },   // 0x47 '(' 
  {41,   529,   5,  11,   6,    0,   -8 },   // 0x48 ')' 
  {47,   536,   6,  11,   6,    0,   -8 }   // 0x49 '/' 
};

const gfxfont_t HotStuff5 PROGMEM = 
{
  (uint8_t  *)HotStuff5Bitmaps, //< Glyph bitmaps, concatenated 
  (gfxglyph_t *)HotStuff5Glyphs, //< Glyph array
  74,// total glyphs in the string
  11,  // newline distance (y axis)
    -1,  // minimum X - left most
    -3,  // minimum Y - bottom most (descenders can drive this negative)
     7,  // maximum X - right most
     9}; // maximum Y - top most
// Approx. 1077 bytes -  but your mileage may vary.

#endif